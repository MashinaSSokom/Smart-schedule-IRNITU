from functions.creating_schedule import full_schedule_in_str, get_one_day_schedule_in_str, get_next_day_schedule_in_str
from functions.calculating_reminder_times import calculating_reminder_times
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
from vk_api.keyboard import VkKeyboard, VkKeyboardColor
from vk_api.longpoll import VkLongPoll, VkEventType
from functions.near_lesson import get_near_lesson, get_now_lesson
from vkbottle.api.keyboard import keyboard_gen
from functions.storage import MongodbService
from vkbottle.keyboard import Keyboard, Text
from functions.find_week import find_week
from vkbottle.bot import Bot, Message
from pymongo import MongoClient
from vkbottle.ext import Middleware
from vk_api import vk_api, VkUpload
from aiohttp import web
import typing
import requests
import types
import json
import vk
import os
import pytz
from datetime import datetime
from vkbottle import Bot, Message
from vkbottle.api.uploader.photo import PhotoUploader

TOKEN = os.environ.get('VK')

MAX_CALLBACK_RANGE = 41
storage = MongodbService().get_instance()
bot = Bot(TOKEN)  # TOKEN
photo_uploader = PhotoUploader(bot.api, generate_attachment_strings=True)

content_types = {
    'text': ['–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '–ë–ª–∏–∂–∞–π—à–∞—è –ø–∞—Ä–∞', '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è', '–ù–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é', '–ù–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é',
             '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞', '–°–ª–µ–¥—É—é—â–∞—è', '–¢–µ–∫—É—â–∞—è']}

—Åontent_commands = {'text': ['–ù–∞—á–∞—Ç—å', '/start', 'start', 'Start']}

content_map = {'text': ['/map', 'map', '–ö–∞—Ä—Ç–∞', '–∫–∞—Ä—Ç–∞', 'Map', '–°—Ö–µ–º–∞', '—Å—Ö–µ–º–∞']}

TZ_IRKUTSK = pytz.timezone('Asia/Irkutsk')

authorize = vk_api.VkApi(token=TOKEN)
upload = VkUpload(authorize)
map_image = "map.jpg"


def parametres_for_buttons_start_menu_vk(text, color):
    '''–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–Ω–æ–ø–æ–∫'''
    return {
        "action": {
            "type": "text",
            "payload": "{\"button\": \"" + "1" + "\"}",
            "label": f"{text}"
        },
        "color": f"{color}"
    }


def get_notifications_status(time):
    """–°—Ç–∞—Ç—É—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    if not time or time == 0:
        notifications_status = '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã ‚ùå\n' \
                               '–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å'
    else:
        notifications_status = f'–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã ‚úÖ\n' \
                               f'–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–¥—ë—Ç –∑–∞ {time} –º–∏–Ω –¥–æ –Ω–∞—á–∞–ª–∞ –ø–∞—Ä—ã üòá'
    return notifications_status


def make_inline_keyboard_notifications():
    """–ö–Ω–æ–ø–∫–∞ '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'"""
    keyboard = Keyboard(one_time=False)
    keyboard.add_row()
    keyboard.add_button(Text(label='–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öô'), color="primary")
    keyboard.add_row()
    keyboard.add_button(Text(label='<==–ù–∞–∑–∞–¥'), color="primary")
    return keyboard


def make_keyboard_start_menu():
    """–°–æ–∑–¥–∞—ë–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏"""
    keyboard = Keyboard(one_time=False)
    keyboard.add_row()
    keyboard.add_button(Text(label="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"), color="primary")
    keyboard.add_button(Text(label="–ë–ª–∏–∂–∞–π—à–∞—è –ø–∞—Ä–∞"), color="primary")
    keyboard.add_row()
    keyboard.add_button(Text(label="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"), color="default")
    keyboard.add_row()
    keyboard.add_button(Text(label="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"), color="default")
    keyboard.add_row()
    keyboard.add_button(Text(label="–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"), color="default")
    keyboard.add_button(Text(label="–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"), color="default")
    return keyboard

def make_keyboard_commands():
    """–°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –∫–æ–º–∞–Ω–¥"""
    keyboard = Keyboard(one_time=False)
    keyboard.add_row()
    keyboard.add_button(Text(label="/about"), color="primary")
    keyboard.add_button(Text(label="/authors"), color="primary")
    keyboard.add_row()
    keyboard.add_button(Text(label="/reg"), color="default")
    keyboard.add_button(Text(label="/map"), color="default")
    keyboard.add_row()
    keyboard.add_button(Text(label="<==–ù–∞–∑–∞–¥"), color="default")
    return keyboard

def make_keyboard_nearlesson():
    """–°–æ–∑–¥–∞—ë–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏"""
    keyboard = Keyboard(one_time=False)
    keyboard.add_row()
    keyboard.add_button(Text(label="–¢–µ–∫—É—â–∞—è"), color="default")
    keyboard.add_button(Text(label="–°–ª–µ–¥—É—é—â–∞—è"), color="default")
    keyboard.add_row()
    keyboard.add_button(Text(label="<==–ù–∞–∑–∞–¥"), color="default")
    return keyboard

def make_inline_keyboard_set_notifications(time=0):
    """–∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    if time != 0:
        text_check = f'{time} –º–∏–Ω'
    else:
        text_check = 'off'

    keyboard = Keyboard(one_time=False)

    keyboard.add_row()
    keyboard.add_button(Text(label="-"), color="primary")
    keyboard.add_button(Text(label=text_check), color="primary")
    keyboard.add_button(Text(label='+'), color="primary")
    keyboard.add_row()
    keyboard.add_button(Text(label="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"), color="default")

    return keyboard


def make_keyboard_institutes(institutes=[]):
    """–ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞"""
    keyboard = {
        "one_time": False
    }
    list_keyboard_main = []
    for institute in institutes:
        if len(institute['name']) >= MAX_CALLBACK_RANGE:
            name = sep_space(institute['name']) + ' ...'
        else:
            name = institute['name']
        list_keyboard = []
        list_keyboard.append(parametres_for_buttons_start_menu_vk(f'{name}', 'primary'))
        list_keyboard_main.append(list_keyboard)
    keyboard['buttons'] = list_keyboard_main
    keyboard = json.dumps(keyboard, ensure_ascii=False).encode('utf-8')
    keyboard = str(keyboard.decode('utf-8'))
    return keyboard


def make_keyboard_choose_course_vk(courses):
    '''–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞'''
    keyboard = {
        "one_time": False
    }
    list_keyboard_main = []
    for course in courses:
        name = course['name']
        list_keyboard = []
        list_keyboard.append(parametres_for_buttons_start_menu_vk(f'{name}', 'primary'))
        list_keyboard_main.append(list_keyboard)
    list_keyboard = []
    list_keyboard.append(parametres_for_buttons_start_menu_vk('–ù–∞–∑–∞–¥ –∫ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞–º', 'primary'))
    list_keyboard_main.append(list_keyboard)
    keyboard['buttons'] = list_keyboard_main
    keyboard = json.dumps(keyboard, ensure_ascii=False).encode('utf-8')
    keyboard = str(keyboard.decode('utf-8'))
    return keyboard


def make_keyboard_choose_group_vk(groups=[]):
    """–ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã"""
    keyboard = {
        "one_time": False
    }
    list_keyboard_main_2 = []
    list_keyboard_main = []
    list_keyboard = []
    overflow = 0
    for group in groups:
        overflow += 1
        if overflow == 27:
            list_keyboard_main.append(list_keyboard)
            list_keyboard = []
            list_keyboard.append(parametres_for_buttons_start_menu_vk('–î–∞–ª–µ–µ', 'primary'))
            list_keyboard.append(parametres_for_buttons_start_menu_vk('–ù–∞–∑–∞–¥ –∫ –∫—É—Ä—Å–∞–º', 'primary'))
            list_keyboard_main.append(list_keyboard)
        else:
            if overflow < 28:
                if len(list_keyboard) == 3:
                    list_keyboard_main.append(list_keyboard)
                    list_keyboard = []
                    list_keyboard.append(parametres_for_buttons_start_menu_vk(f'{group}', 'primary'))
                else:
                    list_keyboard.append(parametres_for_buttons_start_menu_vk(f'{group}', 'primary'))

            else:
                list_keyboard = []
                list_keyboard.append(parametres_for_buttons_start_menu_vk(f'{group}', 'primary'))
                list_keyboard_main_2.append(parametres_for_buttons_start_menu_vk(f'{group}', 'primary'))


    if overflow < 28:
        list_keyboard_main.append(list_keyboard)
        list_keyboard = []
        list_keyboard.append(parametres_for_buttons_start_menu_vk('–ù–∞–∑–∞–¥ –∫ –∫—É—Ä—Å–∞–º', 'primary'))
        list_keyboard_main.append(list_keyboard)
    else:
        list_keyboard_main_2.append(list_keyboard)

    keyboard['buttons'] = list_keyboard_main
    keyboard = json.dumps(keyboard, ensure_ascii=False).encode('utf-8')
    keyboard = str(keyboard.decode('utf-8'))

    return keyboard


def make_keyboard_choose_schedule():
    '''–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–µ–¥–µ–ª–∏'''
    keyboard = Keyboard(one_time=False)
    keyboard.add_row()
    keyboard.add_button(Text(label="–ù–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é"), color="primary")
    keyboard.add_button(Text(label="–ù–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é"), color="primary")
    keyboard.add_row()
    keyboard.add_button(Text(label="–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é"), color="default")
    return keyboard


def make_keyboard_choose_group_vk_page_2(groups=[]):
    '''–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥—Ä—É–ø–ø –ø–æ—Å–ª–µ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π'''
    keyboard = {
        "one_time": False
    }
    groups = groups[26:]
    list_keyboard_main = []
    list_keyboard = []
    for group in groups:
        if len(list_keyboard) == 3:
            list_keyboard_main.append(list_keyboard)
            list_keyboard = []
            list_keyboard.append(parametres_for_buttons_start_menu_vk(f'{group}', 'primary'))
        else:
            list_keyboard.append(parametres_for_buttons_start_menu_vk(f'{group}', 'primary'))
    list_keyboard_main.append(list_keyboard)
    list_keyboard_main.append([parametres_for_buttons_start_menu_vk('–ù–∞–∑–∞–¥', 'primary')])

    keyboard['buttons'] = list_keyboard_main
    keyboard = json.dumps(keyboard, ensure_ascii=False).encode('utf-8')
    keyboard = str(keyboard.decode('utf-8'))
    return keyboard


def sep_space(name):
    '''–û–±—Ä–µ–∑–∞–µ—Ç –¥–ª–∏–Ω—É –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞, –µ—Å–ª–∏ —Ç–æ—Ç –±–æ–ª—å—à–µ 40 —Å–∏–º–≤–æ–ª–æ–≤'''
    dlina = abs(len(name) - MAX_CALLBACK_RANGE)
    name = name[:len(name) - dlina - 5]
    return name


def name_institutes(institutes=[]):
    '''–•—Ä–∞–Ω–∏–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–Ω—Å—Ç–∏—Ç—É—Ç–æ–≤'''
    list_institutes = []
    for i in institutes:
        name = i['name']
        list_institutes.append(name)
    return list_institutes


def name_courses(courses=[]):
    '''–•—Ä–∞–Ω–∏–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–Ω—Å—Ç–∏—Ç—É—Ç–æ–≤'''
    list_courses = []
    for i in courses:
        name = i['name']
        list_courses.append(name)
    return list_courses


def add_statistics(action: str):
    date_now = datetime.now(TZ_IRKUTSK).strftime('%d.%m.%Y')
    time_now = datetime.now(TZ_IRKUTSK).strftime('%H:%M')
    storage.save_statistics(action=action, date=date_now, time=time_now)


def name_groups(groups=[]):
    '''–•—Ä–∞–Ω–∏–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥—Ä—É–ø–ø'''
    list_groups = []
    for i in groups:
        name = i['name']
        list_groups.append(name)
    return list_groups


# ==================== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ ==================== #

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.on.message(text=—Åontent_commands['text'])
async def start_message(ans: Message):
    chat_id = ans.from_id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if storage.get_user(chat_id):
        storage.delete_user_or_userdata(chat_id)  # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await ans('–ü—Ä–∏–≤–µ—Ç\n')
    await ans('–î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –Ω–µ–±–æ–ª—å—à—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—éüòâ\n')
    await ans('–í–æ –≤—Ä–µ–º—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –µ—Å–ª–∏ –≤—ã —Å–æ–≤–µ—Ä—à–∏—Ç–µ –æ—à–∏–±–∫—É, —Ç–æ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–Ω–æ –ø—Ä–æ–ø–∏—Å–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /start –∏ –Ω–∞—á–∞—Ç—å –≤—Å—ë —Å–Ω–∞—á–∞–ª–∞ üòâ\n')
    await ans('–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç–∏—Ç—É—Ç.', keyboard=make_keyboard_institutes(storage.get_institutes()))

    add_statistics(action='start')


# –ö–æ–º–∞–Ω–¥–∞ /reg
@bot.on.message(text='/reg')
async def registration(ans: Message):
    chat_id = ans.from_id
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if storage.get_user(chat_id):
        storage.delete_user_or_userdata(chat_id)  # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await ans('–ü—Ä–æ–π–¥–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—éüòâ\n')
    await ans('–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç–∏—Ç—É—Ç.', keyboard=make_keyboard_institutes(storage.get_institutes()))

    add_statistics(action='reg')


# –ö–æ–º–∞–Ω–¥–∞ /map
@bot.on.message(text=content_map['text'])
async def map(ans: Message):
    chat_id = ans.from_id
    await ans('–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∫–∞—Ä—Ç–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...', keyboard=make_keyboard_start_menu())
    server = authorize.method("photos.getMessagesUploadServer")
    b = requests.post(server['upload_url'], files={'photo': open('map.jpg', 'rb')}).json()
    c = authorize.method('photos.saveMessagesPhoto', {'photo': b['photo'], 'server': b['server'], 'hash': b['hash']})[0]
    authorize.method("messages.send", {"peer_id": chat_id, "attachment": f'photo{c["owner_id"]}_{c["id"]}', 'random_id': 0})


    add_statistics(action='map')


# –ö–æ–º–∞–Ω–¥–∞ /help
@bot.on.message(text='/help')
async def help(ans: Message):
    chat_id = ans.from_id
    await ans('–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n'
              '/about - –æ–ø–∏—Å–∞–Ω–∏–µ —á–∞—Ç –±–æ—Ç–∞\n'
              '/authors - —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–æ–≤ \n'
              '/reg - –ø–æ–≤—Ç–æ—Ä–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n'
              '/map - –∫–∞—Ä—Ç–∞ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞')

    add_statistics(action='help')


# –ö–æ–º–∞–Ω–¥–∞ /about
@bot.on.message(text='/about')
async def about(ans: Message):
    chat_id = ans.from_id
    await ans('–û –±–æ—Ç–µ:\n'
              'Smart schedule IRNITU bot - —ç—Ç–æ —á–∞—Ç –±–æ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π –≤ '
              '–ò—Ä–∫—É—Ç—Å–∫–æ–º –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ\n\n'
              '–ë–ª–∞–≥–æ–¥–∞—Ä—è –±–æ—Ç—É –º–æ–∂–Ω–æ:\n'
              '- –£–∑–Ω–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n'
              '- –ù–∞–∂–∞—Ç–∏–µ–º –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–∏ —É–≤–∏–¥–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–∏–∂–∞–π—à–µ–π –ø–∞—Ä–µ\n'
              '- –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≥–∏–±–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, '
              '–∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∑–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ –Ω–∞—á–∞–ª–∞ –∑–∞–Ω—è—Ç–∏—è', keyboard=make_keyboard_start_menu())

    add_statistics(action='about')


# –ö–æ–º–∞–Ω–¥–∞ /authors
@bot.on.message(text='/authors')
async def authors(ans: Message):
    chat_id = ans.from_id
    await ans('–ê–≤—Ç–æ—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞:\n'
              '-[id132677094|–ê–ª–µ–∫—Å–µ–π]\n'
              '-[id128784852|–°—É–ª—Ç–∞–Ω]\n'
              '-[id169584462|–ê–ª–µ–∫—Å–∞–Ω–¥—Ä] \n'
              '-[id135615548|–í–ª–∞–¥–∏—Å–ª–∞–≤]\n'
              '-[id502898628|–ö–∏—Ä–∏–ª–ª]\n\n'
              '–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–æ–º –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º –ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. '
              '–ë—É–¥–µ–º —Ä–∞–¥—ã üòâ\n', keyboard=make_keyboard_start_menu()
              )

    add_statistics(action='authors')


@bot.on.message(text=content_types['text'])
async def scheduler(ans: Message):
    chat_id = ans.from_id
    data = ans.text
    user = storage.get_user(chat_id=chat_id)

    if '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ' == data and user:
        await ans('–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥\n', keyboard=make_keyboard_choose_schedule())
        add_statistics(action='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ')

    if ('–ù–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é' == data or '–ù–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é' == data) and user:
        group = storage.get_user(chat_id=chat_id)['group']
        schedule = storage.get_schedule(group=group)
        if not schedule:
            await ans('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ‚è±')
            add_statistics(action=data)
            return

        schedule = schedule['schedule']
        week = find_week()

        # –º–µ–Ω—è–µ–º –Ω–µ–¥–µ–ª—é
        if data == '–ù–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é':
            week = 'odd' if week == 'even' else 'even'

        week_name = '—á–µ—Ç–Ω–∞—è' if week == 'odd' else '–Ω–µ—á–µ—Ç–Ω–∞—è'

        schedule_str = full_schedule_in_str(schedule, week=week)
        await ans(f'–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ {group}\n'
                  f'–ù–µ–¥–µ–ª—è: {week_name}', keyboard=make_keyboard_start_menu())

        for schedule in schedule_str:
            await ans(f'{schedule}')

        add_statistics(action=data)



    elif '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è' == data and user:
        group = storage.get_user(chat_id=chat_id)['group']
        schedule = storage.get_schedule(group=group)
        if not schedule:
            await ans('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æüö´üò£\n'
                      '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ‚è±', keyboard=make_keyboard_start_menu())
            add_statistics(action='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è')
            return
        schedule = schedule['schedule']
        week = find_week()
        schedule_one_day = get_one_day_schedule_in_str(schedule=schedule, week=week)
        if not schedule_one_day:
            await ans('–°–µ–≥–æ–¥–Ω—è –ø–∞—Ä –Ω–µ—Ç üòé')
            return
        await ans(f'{schedule_one_day}')
        add_statistics(action='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è')

    elif '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞' == data and user:
        group = storage.get_user(chat_id=chat_id)['group']
        schedule = storage.get_schedule(group=group)
        if not schedule:
            await ans('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æüö´üò£\n'
                      '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ‚è±', keyboard=make_keyboard_start_menu())
            add_statistics(action='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞')
            return
        schedule = schedule['schedule']
        week = find_week()
        schedule_next_day = get_next_day_schedule_in_str(schedule=schedule, week=week)
        if not schedule_next_day:
            await ans('–ó–∞–≤—Ç—Ä–∞ –ø–∞—Ä –Ω–µ—Ç üòé')
            return
        await ans(f'{schedule_next_day}')
        add_statistics(action='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞')

    elif '–ë–ª–∏–∂–∞–π—à–∞—è –ø–∞—Ä–∞' in data and user:
        await ans('–ë–ª–∏–∂–∞–π—à–∞—è –ø–∞—Ä–∞', keyboard=make_keyboard_nearlesson())
        add_statistics(action='–ë–ª–∏–∂–∞–π—à–∞—è –ø–∞—Ä–∞')
        return


    elif '–¢–µ–∫—É—â–∞—è' in data and user:
        group = storage.get_user(chat_id=chat_id)['group']
        schedule = storage.get_schedule(group=group)
        if not schedule:
            await ans('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æüö´üò£\n'
                      '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ‚è±', keyboard=make_keyboard_start_menu())
            add_statistics(action='–¢–µ–∫—É—â–∞—è')
            return
        schedule = schedule['schedule']
        week = find_week()

        now_lessons = get_now_lesson(schedule=schedule, week=week)
        print(now_lessons)

        # –µ—Å–ª–∏ –ø–∞—Ä –Ω–µ—Ç
        if not now_lessons:
            await ans('–°–µ–π—á–∞—Å –ø–∞—Ä—ã –Ω–µ—Ç, –º–æ–∂–µ—Ç–µ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å)', keyboard=make_keyboard_start_menu())
            add_statistics(action='–¢–µ–∫—É—â–∞—è')
            return

        now_lessons_str = ''
        for near_lesson in now_lessons:
            name = near_lesson['name']
            if name == '—Å–≤–æ–±–æ–¥–Ω–æ':
                await ans('–°–µ–π—á–∞—Å –ø–∞—Ä—ã –Ω–µ—Ç, –º–æ–∂–µ—Ç–µ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å)', keyboard=make_keyboard_start_menu())
                return
            now_lessons_str += '-------------------------------------------\n'
            aud = near_lesson['aud']
            if aud:
                aud = f'–ê—É–¥–∏—Ç–æ—Ä–∏—è: {aud}\n'
            time = near_lesson['time']
            info = near_lesson['info'].replace(",", "")
            prep = near_lesson['prep']

            now_lessons_str += f'{time}\n' \
                                f'{aud}' \
                                f'üëâ{name}\n' \
                                f'{info} {prep}\n'
        now_lessons_str += '-------------------------------------------\n'
        await ans(f'üß†–¢–µ–∫—É—â–∞—è –ø–∞—Ä–∞üß†\n'f'{now_lessons_str}', keyboard=make_keyboard_start_menu())

        add_statistics(action='–¢–µ–∫—É—â–∞—è')

    elif '–°–ª–µ–¥—É—é—â–∞—è' in data and user:
        group = storage.get_user(chat_id=chat_id)['group']
        schedule = storage.get_schedule(group=group)
        if not schedule:
            await ans('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æüö´üò£\n'
                      '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ‚è±', keyboard=make_keyboard_start_menu())
            add_statistics(action='–°–ª–µ–¥—É—é—â–∞—è')
            return
        schedule = schedule['schedule']
        week = find_week()

        near_lessons = get_near_lesson(schedule=schedule, week=week)

        # –µ—Å–ª–∏ –ø–∞—Ä –Ω–µ—Ç
        if not near_lessons:
            await ans('–°–µ–≥–æ–¥–Ω—è –±–æ–ª—å—à–µ –ø–∞—Ä –Ω–µ—Ç üòé', keyboard=make_keyboard_start_menu())
            add_statistics(action='–°–ª–µ–¥—É—é—â–∞—è')
            return

        near_lessons_str = ''
        for near_lesson in near_lessons:
            name = near_lesson['name']
            if name == '—Å–≤–æ–±–æ–¥–Ω–æ':
                await ans('–°–µ–≥–æ–¥–Ω—è –±–æ–ª—å—à–µ –ø–∞—Ä –Ω–µ—Ç üòé', keyboard=make_keyboard_start_menu())
                return
            near_lessons_str += '-------------------------------------------\n'
            aud = near_lesson['aud']
            if aud:
                aud = f'–ê—É–¥–∏—Ç–æ—Ä–∏—è: {aud}\n'
            time = near_lesson['time']
            info = near_lesson['info'].replace(",", "")
            prep = near_lesson['prep']

            near_lessons_str += f'{time}\n' \
                                f'{aud}' \
                                f'üëâ{name}\n' \
                                f'{info} {prep}\n'
        near_lessons_str += '-------------------------------------------\n'
        await ans(f'üß†–ë–ª–∏–∂–∞–π—à–∞—è –ø–∞—Ä–∞üß†\n'f'{near_lessons_str}', keyboard=make_keyboard_start_menu())

        add_statistics(action='–°–ª–µ–¥—É—é—â–∞—è')


@bot.on.message()
async def wrapper(ans: Message):
    '''–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'''
    chat_id = ans.from_id
    message_inst = ans.text
    message = ans.text
    user = storage.get_user(chat_id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –º–µ—Å—Å–µ–¥–∂ –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–Ω–∏–≤–µ—Ä –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    institutes = name_institutes(storage.get_institutes())
    for institute in institutes:
        if message_inst[:-5] in institute:
            message_inst = institute

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if not user:
        institutes = name_institutes(storage.get_institutes())
        # –°–º–æ—Ç—Ä–∏–º –≤—ã–±—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–Ω—Å—Ç–∏—Ç—É—Ç
        if message_inst in institutes:
            # –ï—Å–ª–∏ –¥–∞, —Ç–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–¥
            storage.save_or_update_user(chat_id=chat_id, institute=message_inst)
            await ans(f'–í—ã –≤—ã–±—Ä–∞–ª–∏: {message_inst}\n')
            await ans('–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å.', keyboard=make_keyboard_choose_course_vk(storage.get_courses(message_inst)))
        else:
            await ans('–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é\n')
        return

    # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥ –∫ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞–º
    if message == "–ù–∞–∑–∞–¥ –∫ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞–º" and not 'course' in user.keys():
        await ans('–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç–∏—Ç—É—Ç.', keyboard=make_keyboard_institutes(storage.get_institutes()))
        storage.delete_user_or_userdata(chat_id=chat_id)
        return

    # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥ –∫ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞–º
    if message == "–ù–∞–∑–∞–¥ –∫ –∫—É—Ä—Å–∞–º" and not 'group' in user.keys():

        await ans('–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å.', keyboard=make_keyboard_choose_course_vk(storage.get_courses(storage.get_user(chat_id=chat_id)['institute'])))
        storage.delete_user_or_userdata(chat_id=chat_id, delete_only_course=True)
        return

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞
    elif not 'course' in user.keys():
        institute = user['institute']
        course = storage.get_courses(institute)

        # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –∫—É—Ä—Å–∞
        if message in name_courses(course):
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫—É—Ä—Å
            storage.save_or_update_user(chat_id=chat_id, course=message)
            groups = storage.get_groups(institute=institute, course=message)
            groups = name_groups(groups)
            await ans(f'–í—ã –≤—ã–±—Ä–∞–ª–∏: {message}\n')
            await ans('–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É.', keyboard=make_keyboard_choose_group_vk(groups))
        else:
            await ans('–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é\n')
        return
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞
    elif not 'group' in user.keys():
        institute = user['institute']
        course = user['course']
        groups = storage.get_groups(institute=institute, course=course)
        groups = name_groups(groups)
        # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –≥—Ä—É–ø–ø—ã
        if message in groups:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É
            storage.save_or_update_user(chat_id=chat_id, group=message)
            await ans('–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!üòä\n\n'
                      '–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–≤—Ç–æ—Ä–Ω–æ, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /reg\n'
                      '–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã - /help', keyboard=make_keyboard_start_menu())
        else:
            if message == "–î–∞–ª–µ–µ":
                await ans('–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É.', keyboard=make_keyboard_choose_group_vk_page_2(groups))
            elif message == "–ù–∞–∑–∞–¥":
                await ans('–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É.', keyboard=make_keyboard_choose_group_vk(groups))
            else:
                await ans('–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é\n')
        return

    elif '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ' in message and user:
        time = user['notifications']
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        if not time:
            time = 0
        await ans(f'{get_notifications_status(time)}', keyboard=make_inline_keyboard_notifications())

        add_statistics(action='–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ')

    elif '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' in message and user:
        time = user['notifications']
        await ans('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ‚öô\n\n'
                  '–£–∫–∞–∂–∏—Ç–µ –∑–∞ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ –ø–∞—Ä—ã –¥–æ–ª–∂–Ω–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',
                  keyboard=make_inline_keyboard_set_notifications(time))
        add_statistics(action='–ù–∞—Å—Ç—Ä–æ–π–∫–∏')

    elif '-' in message:
        time = user['notifications']
        if time == 0:
            await ans('–•–æ—á–µ—à—å —É–π—Ç–∏ –≤ –º–∏–Ω—É—Å?', keyboard=make_inline_keyboard_set_notifications(time))
            return
        time -= 5
        # –û—Ç–Ω–∏–º–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        if time <= 0:
            time = 0
        storage.save_or_update_user(chat_id=chat_id, notifications=time)
        await ans('minus', keyboard=make_inline_keyboard_set_notifications(time))
        return

    elif '+' in message:
        time = user['notifications']
        time += 5
        storage.save_or_update_user(chat_id=chat_id, notifications=time)
        await ans('plus', keyboard=make_inline_keyboard_set_notifications(time))

    elif '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' in message:

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑—É
        time = user['notifications']

        group = storage.get_user(chat_id=chat_id)['group']

        schedule = storage.get_schedule(group=group)['schedule']
        if time > 0:
            reminders = calculating_reminder_times(schedule=schedule, time=int(time))
        else:
            reminders = []
        storage.save_or_update_user(chat_id=chat_id, notifications=time, reminders=reminders)

        await ans(f'{get_notifications_status(time)}', keyboard=make_keyboard_start_menu())


    elif '–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é' in message and user:
        await ans('–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é', keyboard=make_keyboard_start_menu())
        add_statistics(action='–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é')

    elif '<==–ù–∞–∑–∞–¥' == message and user:
        await ans('–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é', keyboard=make_keyboard_start_menu())

    elif '–î–∞–ª–µ–µ' in message:
        await ans('–î–∞–ª–µ–µ', keyboard=make_keyboard_choose_group_vk_page_2())

    elif '–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥' == message and user:
        await ans('–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n'
              '/about - –æ–ø–∏—Å–∞–Ω–∏–µ —á–∞—Ç –±–æ—Ç–∞\n'
              '/authors - —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–æ–≤ \n'
              '/reg - –ø–æ–≤—Ç–æ—Ä–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n'
              '/map - –∫–∞—Ä—Ç–∞ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞', keyboard=make_keyboard_commands())

        add_statistics(action='help')
        return

    else:
        await ans('–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é üòû')
        add_statistics(action='bullshit')



def main():
    '''–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞'''
    bot.run_polling()


if __name__ == "__main__":
    main()
