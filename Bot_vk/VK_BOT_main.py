from vk_api import vk_api
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
from vk_api.keyboard import VkKeyboard, VkKeyboardColor
from vk_api.longpoll import VkLongPoll, VkEventType
from vkbottle.bot import Bot, Message
from functions.storage import MongodbService
from vkbottle.keyboard import Keyboard, Text
from vkbottle.api.keyboard import keyboard_gen
from vkbottle.ext import Middleware
import vk
import json
import typing
from aiohttp import web
import os

token = os.environ.get('VK')
authorize = vk_api.VkApi(token=token)
longpoll= VkLongPoll(authorize)
MAX_CALLBACK_RANGE = 41
storage = MongodbService().get_instance()
bot = Bot(f"{os.environ.get('VK')}", debug="DEBUG") # TOKEN
database: typing.Dict[int, str] = {}  # –ù–∞—à –ø—Ä–æ—Ç–æ—Ç–∏–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

def parametres_for_buttons_start_menu_vk(text, color):
    '''–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–Ω–æ–ø–æ–∫'''
    return {
        "action": {
        "type": "text",
        "payload": "{\"button\": \"" + "1" + "\"}",
        "label": f"{text}"
        },
        "color": f"{color}"
        }

def make_keyboard_start_menu():
    """–°–æ–∑–¥–∞—ë–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏"""
    keyboard = Keyboard(one_time=False)
    keyboard.add_row()
    keyboard.add_button(Text(label="–†–∞—Å"), color="primary")
    keyboard.add_button(Text(label="–ë–ª–∏–∂–∞–π—à–∞—è –ø–∞—Ä–∞"), color="primary")
    keyboard.add_row()
    keyboard.add_button(Text(label="–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"), color="default")
    return keyboard


def make_keyboard_institutes(institutes =[]):
    """–ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞"""
    keyboard = {
        "one_time": False
    }
    list_keyboard_main = []
    for institute in institutes:
        if len(institute['name']) >= MAX_CALLBACK_RANGE:
            name = sep_space(institute['name'])
        else:
            name = institute['name']
        list_keyboard = []
        list_keyboard.append(parametres_for_buttons_start_menu_vk(f'{name}', 'primary'))
        list_keyboard_main.append(list_keyboard)
    keyboard['buttons'] = list_keyboard_main
    keyboard = json.dumps(keyboard, ensure_ascii=False).encode('utf-8')
    keyboard = str(keyboard.decode('utf-8'))
    return keyboard

def make_keyboard_choose_course_vk(courses):
    '''–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞'''
    keyboard = {
        "one_time": False
    }
    list_keyboard_main = []
    for course in courses:
        name = course['name']
        list_keyboard = []
        list_keyboard.append(parametres_for_buttons_start_menu_vk(f'{name}', 'primary'))
        list_keyboard_main.append(list_keyboard)
    keyboard['buttons'] = list_keyboard_main
    keyboard = json.dumps(keyboard, ensure_ascii=False).encode('utf-8')
    keyboard = str(keyboard.decode('utf-8'))
    return keyboard

def make_keyboard_choose_group_vk(groups=[]):
    '''–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã'''

    keyboard = {
        "one_time": False
    }
    global list_keyboard_main_2
    global all_groups
    overflow = 0
    list_keyboard_main_2 = []
    list_keyboard_main = []
    list_keyboard = []
    for group in groups:
        if choice in group['institute']:
            name = group['name']
            all_groups.append(name)
            overflow+=1
            if overflow == 27:
                list_keyboard_main.append(list_keyboard)
                list_keyboard = []
                list_keyboard.append(parametres_for_buttons_start_menu_vk('–î–∞–ª–µ–µ', 'primary'))
                list_keyboard_main.append(list_keyboard)
            else:
                if overflow < 28 :
                    if len(list_keyboard) == 3:
                        list_keyboard_main.append(list_keyboard)
                        list_keyboard = []
                        list_keyboard.append(parametres_for_buttons_start_menu_vk(f'{name}', 'primary'))
                    else:
                        list_keyboard.append(parametres_for_buttons_start_menu_vk(f'{name}', 'primary'))
                else:
                    list_keyboard = []
                    list_keyboard.append(parametres_for_buttons_start_menu_vk(f'{name}', 'primary'))
                    list_keyboard_main_2.append(list_keyboard)
    if overflow < 28:
        list_keyboard_main.append(list_keyboard)
    else:
        list_keyboard_main_2.append(list_keyboard)
    keyboard['buttons'] = list_keyboard_main
    return keyboard

def make_keyboard_choose_group_vk_page_2(groups=[]):
    '''–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥—Ä—É–ø–ø –ø–æ—Å–ª–µ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π'''
    keyboard = {
        "one_time": False
    }
    list_keyboard_main = []
    list_keyboard = []
    for group in groups:
        if len(list_keyboard) == 3:
            list_keyboard_main.append(list_keyboard)
            list_keyboard = []
        else:
            list_keyboard.append(*group)
    list_keyboard_main.append(list_keyboard)
    list_keyboard_main.append([parametres_for_buttons_start_menu_vk('–ù–∞–∑–∞–¥', 'primary')])
    keyboard['buttons'] = list_keyboard_main
    return keyboard

def sep_space(name):
    '''–û–±—Ä–µ–∑–∞–µ—Ç –¥–ª–∏–Ω—É –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞, –µ—Å–ª–∏ —Ç–æ—Ç –±–æ–ª—å—à–µ 40 —Å–∏–º–≤–æ–ª–æ–≤'''
    dlina = abs(len(name) - MAX_CALLBACK_RANGE)
    name = name[:len(name) - dlina-5]
    return name

def name_institutes(institutes = []):
    '''–•—Ä–∞–Ω–∏–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–Ω—Å—Ç–∏—Ç—É—Ç–æ–≤'''
    list_institutes = []
    for i in institutes:
        name = i['name']
        list_institutes.append(name)
    return list_institutes

def name_groups(groups = []):
    '''–•—Ä–∞–Ω–∏–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥—Ä—É–ø–ø'''
    list_groups = []
    for i in groups:
        name = i['name']
        list_groups.append(name)
    return list_groups

def listening():
    '''–ñ–¥—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ'''
    for event in longpoll.listen():
        print(dir(event))
        if event.type == VkEventType.MESSAGE_NEW:
            if event.to_me:
                id = event.user_id
                message = event.text
                return message

@bot.on.message(text='–•–∞–π')
async def wrapper(ans: Message):
    '''–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'''
    await ans('–ü—Ä–∏–≤–µ—Ç\n')
    await ans('–î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –Ω–µ–±–æ–ª—å—à—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—éüòâ\n')
    await ans('–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç–∏—Ç—É—Ç.', keyboard=make_keyboard_institutes(storage.get_institutes()))
    x = listening()
    while True:
        inst = listening()
        institutes = name_institutes(storage.get_institutes())
        if inst in institutes:
            await ans('–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å.', keyboard=make_keyboard_choose_course_vk(storage.get_courses(inst)))
            break
        else:
            await ans('–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª, –≤—ã–±–µ—Ä–∏ –∏–Ω—Å—Ç–∏—Ç—É—Ç –∏ –Ω–µ –µ–±–∏ –º–æ–∑–≥—É\n')

    while True:
        group = listening()
        groups = name_groups(storage.get_groups())
        if group in groups:
            await ans('–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å.', keyboard=make_keyboard_choose_course_vk(storage.get_courses(inst)))
            break
        else:
            await ans('–Ø —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª, –≤—ã–±–µ—Ä–∏ –∏–Ω—Å—Ç–∏—Ç—É—Ç –∏ –Ω–µ –µ–±–∏ –º–æ–∑–≥—É\n')

def main():
    '''–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞'''
    bot.run_polling()

if __name__ == "__main__":
    main()

