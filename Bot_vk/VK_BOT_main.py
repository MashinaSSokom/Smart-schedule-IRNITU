from functions.creating_schedule import full_schedule_in_str, full_schedule_in_str_prep, get_one_day_schedule_in_str, get_next_day_schedule_in_str
from functions.calculating_reminder_times import calculating_reminder_times
from functions.near_lesson import get_near_lesson, get_now_lesson
from functions.storage import MongodbService
from vkbottle_types import BaseStateGroup
from functions.logger import logger
from vkbottle.bot import Message, Bot
from vkbottle import Keyboard, KeyboardButtonColor, Text
from functions.find_week import find_week
from vk_api import vk_api, VkUpload
import requests
import json
import os
import pytz
from datetime import datetime
from vkbottle.bot import Bot, Message

TOKEN = os.environ.get('VK')

MAX_CALLBACK_RANGE = 41
storage = MongodbService().get_instance()
bot = Bot(TOKEN)  # TOKEN

content_types = {
    'text': ['–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ üóì', '–ë–ª–∏–∂–∞–π—à–∞—è –ø–∞—Ä–∞ ‚è±', '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è üçè', '–ù–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é',
             '–ù–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é',
             '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ üçé', '–°–ª–µ–¥—É—é—â–∞—è', '–¢–µ–∫—É—â–∞—è']}

—Åontent_commands = {'text': ['–ù–∞—á–∞—Ç—å', '–Ω–∞—á–∞—Ç—å', '–ù–∞—á–∞–ª–æ', 'start']}

content_map = {'text': ['map', '–ö–∞—Ä—Ç–∞', '–∫–∞—Ä—Ç–∞', 'Map', '–°—Ö–µ–º–∞', '—Å—Ö–µ–º–∞']}

TZ_IRKUTSK = pytz.timezone('Asia/Irkutsk')

authorize = vk_api.VkApi(token=TOKEN)
upload = VkUpload(authorize)
map_image = "map.jpg"

Condition_request = {}


def parametres_for_buttons_start_menu_vk(text, color):
    '''–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–Ω–æ–ø–æ–∫'''
    return {
        "action": {
            "type": "text",
            "payload": "{\"button\": \"" + "1" + "\"}",
            "label": f"{text}"
        },
        "color": f"{color}"
    }


def get_notifications_status(time):
    """–°—Ç–∞—Ç—É—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    if not time or time == 0:
        notifications_status = '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã ‚ùå\n' \
                               '–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å'
    else:
        notifications_status = f'–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã ‚úÖ\n' \
                               f'–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–¥—ë—Ç –∑–∞ {time} –º–∏–Ω –¥–æ –Ω–∞—á–∞–ª–∞ –ø–∞—Ä—ã üòá'
    return notifications_status


def make_inline_keyboard_notifications():
    """–ö–Ω–æ–ø–∫–∞ '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'"""
    keyboard = Keyboard(one_time=False)
    keyboard.row()
    keyboard.add(Text(label='–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öô'), color=KeyboardButtonColor.PRIMARY)
    keyboard.row()
    keyboard.add(Text(label='<==–ù–∞–∑–∞–¥'), color=KeyboardButtonColor.SECONDARY)
    return keyboard


def make_keyboard_start_menu():
    """–°–æ–∑–¥–∞—ë–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏"""
    keyboard = Keyboard(one_time=False)
    keyboard.row()
    keyboard.add(Text(label="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ üóì"), color=KeyboardButtonColor.PRIMARY)
    keyboard.add(Text(label="–ë–ª–∏–∂–∞–π—à–∞—è –ø–∞—Ä–∞ ‚è±"), color=KeyboardButtonColor.PRIMARY)
    keyboard.row()
    keyboard.add(Text(label="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è üçè"), color=KeyboardButtonColor.SECONDARY)
    keyboard.row()
    keyboard.add(Text(label="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ üçé"), color=KeyboardButtonColor.SECONDARY)
    keyboard.row()
    keyboard.add(Text(label="–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ üì£"), color=KeyboardButtonColor.PRIMARY)
    keyboard.add(Text(label="–î—Ä—É–≥–æ–µ ‚ö°"), color=KeyboardButtonColor.PRIMARY)
    return keyboard


def make_keyboard_commands():
    """–°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –∫–æ–º–∞–Ω–¥"""
    keyboard = Keyboard(one_time=False)
    keyboard.row()
    # keyboard.add(Text(label="about"), color=KeyboardButtonColor.PRIMARY)
    keyboard.add(Text(label="–ê–≤—Ç–æ—Ä—ã"), color=KeyboardButtonColor.PRIMARY)
    keyboard.row()
    keyboard.add(Text(label="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"), color=KeyboardButtonColor.SECONDARY)
    keyboard.add(Text(label="–ö–∞—Ä—Ç–∞"), color=KeyboardButtonColor.SECONDARY)
    keyboard.row()
    keyboard.add(Text(label="<==–ù–∞–∑–∞–¥"), color=KeyboardButtonColor.SECONDARY)
    return keyboard


def make_keyboard_extra():
    keyboard = Keyboard(one_time=False)
    keyboard.row()
    keyboard.add(Text(label="–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"), color=KeyboardButtonColor.PRIMARY)
    keyboard.row()
    keyboard.add(Text(label="–ü–æ–∏—Å–∫ üîé"), color=KeyboardButtonColor.SECONDARY)
    keyboard.row()
    keyboard.add(Text(label="<==–ù–∞–∑–∞–¥"), color=KeyboardButtonColor.SECONDARY)
    return keyboard


def make_keyboard_nearlesson():
    """–°–æ–∑–¥–∞—ë–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏"""
    keyboard = Keyboard(one_time=False)
    keyboard.row()
    keyboard.add(Text(label="–¢–µ–∫—É—â–∞—è"), color=KeyboardButtonColor.PRIMARY)
    keyboard.add(Text(label="–°–ª–µ–¥—É—é—â–∞—è"), color=KeyboardButtonColor.PRIMARY)
    keyboard.row()
    keyboard.add(Text(label="<==–ù–∞–∑–∞–¥"), color=KeyboardButtonColor.SECONDARY)
    return keyboard


def make_inline_keyboard_set_notifications(time=0):
    """–∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    if time != 0:
        text_check = f'{time} –º–∏–Ω'
    else:
        text_check = 'off'

    keyboard = Keyboard(one_time=False)

    keyboard.row()
    keyboard.add(Text(label="-"), color=KeyboardButtonColor.PRIMARY)
    keyboard.add(Text(label=text_check), color=KeyboardButtonColor.PRIMARY)
    keyboard.add(Text(label='+'), color=KeyboardButtonColor.PRIMARY)
    keyboard.row()
    keyboard.add(Text(label="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"), color=KeyboardButtonColor.SECONDARY)

    return keyboard


def make_keyboard_institutes(institutes=[]):
    """–ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞"""
    keyboard = {
        "one_time": False
    }
    list_keyboard_main = []
    for institute in institutes:
        if len(institute['name']) >= MAX_CALLBACK_RANGE:
            name = sep_space(institute['name']) + ' ...'
        else:
            name = institute['name']
        list_keyboard = []
        list_keyboard.append(parametres_for_buttons_start_menu_vk(f'{name}', 'primary'))
        list_keyboard_main.append(list_keyboard)
    keyboard['buttons'] = list_keyboard_main
    keyboard = json.dumps(keyboard, ensure_ascii=False).encode('utf-8')
    keyboard = str(keyboard.decode('utf-8'))
    return keyboard


def make_keyboard_choose_course_vk(courses):
    '''–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞'''
    keyboard = {
        "one_time": False
    }
    list_keyboard_main = []
    for course in courses:
        name = course['name']
        list_keyboard = []
        list_keyboard.append(parametres_for_buttons_start_menu_vk(f'{name}', 'primary'))
        list_keyboard_main.append(list_keyboard)
    list_keyboard = []
    list_keyboard.append(parametres_for_buttons_start_menu_vk('–ù–∞–∑–∞–¥ –∫ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞–º', 'primary'))
    list_keyboard_main.append(list_keyboard)
    keyboard['buttons'] = list_keyboard_main
    keyboard = json.dumps(keyboard, ensure_ascii=False).encode('utf-8')
    keyboard = str(keyboard.decode('utf-8'))
    return keyboard


def make_keyboard_choose_group_vk(groups=[]):
    """–ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã"""
    keyboard = {
        "one_time": False
    }
    list_keyboard_main_2 = []
    list_keyboard_main = []
    list_keyboard = []
    overflow = 0
    for group in groups:
        overflow += 1
        if overflow == 27:
            list_keyboard_main.append(list_keyboard)
            list_keyboard = []
            list_keyboard.append(parametres_for_buttons_start_menu_vk('–î–∞–ª–µ–µ', 'primary'))
            list_keyboard.append(parametres_for_buttons_start_menu_vk('–ù–∞–∑–∞–¥ –∫ –∫—É—Ä—Å–∞–º', 'primary'))
            list_keyboard_main.append(list_keyboard)
        else:
            if overflow < 28:
                if len(list_keyboard) == 3:
                    list_keyboard_main.append(list_keyboard)
                    list_keyboard = []
                    list_keyboard.append(parametres_for_buttons_start_menu_vk(f'{group}', 'primary'))
                else:
                    list_keyboard.append(parametres_for_buttons_start_menu_vk(f'{group}', 'primary'))

            else:
                list_keyboard = []
                list_keyboard.append(parametres_for_buttons_start_menu_vk(f'{group}', 'primary'))
                list_keyboard_main_2.append(parametres_for_buttons_start_menu_vk(f'{group}', 'primary'))

    if overflow < 28:
        list_keyboard_main.append(list_keyboard)
        list_keyboard = []
        list_keyboard.append(parametres_for_buttons_start_menu_vk('–ù–∞–∑–∞–¥ –∫ –∫—É—Ä—Å–∞–º', 'primary'))
        list_keyboard_main.append(list_keyboard)
    else:
        list_keyboard_main_2.append(list_keyboard)

    keyboard['buttons'] = list_keyboard_main
    keyboard = json.dumps(keyboard, ensure_ascii=False).encode('utf-8')
    keyboard = str(keyboard.decode('utf-8'))

    return keyboard


def make_keyboard_choose_schedule():
    '''–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–µ–¥–µ–ª–∏'''
    keyboard = Keyboard(one_time=False)
    keyboard.row()
    keyboard.add(Text(label="–ù–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é"), color=KeyboardButtonColor.PRIMARY)
    keyboard.add(Text(label="–ù–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é"), color=KeyboardButtonColor.PRIMARY)
    keyboard.row()
    keyboard.add(Text(label="–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é"), color=KeyboardButtonColor.SECONDARY)
    return keyboard


def make_keyboard_choose_group_vk_page_2(groups=[]):
    '''–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥—Ä—É–ø–ø –ø–æ—Å–ª–µ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π'''
    keyboard = {
        "one_time": False
    }
    groups = groups[26:]
    list_keyboard_main = []
    list_keyboard = []
    for group in groups:
        if len(list_keyboard) == 3:
            list_keyboard_main.append(list_keyboard)
            list_keyboard = []
            list_keyboard.append(parametres_for_buttons_start_menu_vk(f'{group}', 'primary'))
        else:
            list_keyboard.append(parametres_for_buttons_start_menu_vk(f'{group}', 'primary'))
    list_keyboard_main.append(list_keyboard)
    list_keyboard_main.append([parametres_for_buttons_start_menu_vk('–ù–∞–∑–∞–¥', 'primary')])

    keyboard['buttons'] = list_keyboard_main
    keyboard = json.dumps(keyboard, ensure_ascii=False).encode('utf-8')
    keyboard = str(keyboard.decode('utf-8'))
    return keyboard


def make_keyboard_search_group(page, search_result=[]):
    """–ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã"""

    keyboard = {
        "one_time": False
    }

    list_keyboard_main_2 = []
    list_keyboard_main = []
    list_keyboard = []
    overflow = 0
    for group in search_result:
        group = group['search']
        overflow += 1
        if overflow == 25:
            list_keyboard_main.append(list_keyboard)
            list_keyboard = []
            if page == 1:
                list_keyboard.append(parametres_for_buttons_start_menu_vk('–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é', 'primary'))
                list_keyboard.append(parametres_for_buttons_start_menu_vk('–î–∞–ª—å—à–µ', 'positive'))
                list_keyboard_main.append(list_keyboard)
            elif page > 1:
                list_keyboard.append(parametres_for_buttons_start_menu_vk('<==–ù–∞–∑–∞–¥', 'negative'))
                list_keyboard.append(parametres_for_buttons_start_menu_vk('–î–∞–ª—å—à–µ', 'positive'))
                list_keyboard_main.append(list_keyboard)
                list_keyboard_main.append([parametres_for_buttons_start_menu_vk('–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é', 'primary')])

        else:
            if overflow < 26:
                if len(list_keyboard) == 3:
                    list_keyboard_main.append(list_keyboard)
                    list_keyboard = []
                    list_keyboard.append(parametres_for_buttons_start_menu_vk(f'{group}', 'primary'))
                else:
                    list_keyboard.append(parametres_for_buttons_start_menu_vk(f'{group}', 'primary'))

            else:
                list_keyboard = []
                list_keyboard.append(parametres_for_buttons_start_menu_vk(f'{group}', 'primary'))
                list_keyboard_main_2.append(parametres_for_buttons_start_menu_vk(f'{group}', 'primary'))

    if overflow < 26 and page > 1:
        list_keyboard_main.append(list_keyboard)
        list_keyboard = []
        list_keyboard.append(parametres_for_buttons_start_menu_vk('<==–ù–∞–∑–∞–¥', 'negative'))
        list_keyboard.append(parametres_for_buttons_start_menu_vk('–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é', 'primary'))
        list_keyboard_main.append(list_keyboard)

    elif overflow < 26:
        list_keyboard_main.append(list_keyboard)
        list_keyboard = []
        list_keyboard.append(parametres_for_buttons_start_menu_vk('–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é', 'primary'))
        list_keyboard_main.append(list_keyboard)
    else:
        list_keyboard_main_2.append(list_keyboard)

    keyboard['buttons'] = list_keyboard_main
    keyboard = json.dumps(keyboard, ensure_ascii=False).encode('utf-8')
    keyboard = str(keyboard.decode('utf-8'))

    return keyboard


def make_keyboard_main_menu():
    keyboard = Keyboard(one_time=False)
    keyboard.row()
    keyboard.add(Text(label="–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é"), color=KeyboardButtonColor.PRIMARY)
    return keyboard


def sep_space(name):
    '''–û–±—Ä–µ–∑–∞–µ—Ç –¥–ª–∏–Ω—É –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞, –µ—Å–ª–∏ —Ç–æ—Ç –±–æ–ª—å—à–µ 40 —Å–∏–º–≤–æ–ª–æ–≤'''
    dlina = abs(len(name) - MAX_CALLBACK_RANGE)
    name = name[:len(name) - dlina - 5]
    return name


def name_institutes(institutes=[]):
    '''–•—Ä–∞–Ω–∏–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–Ω—Å—Ç–∏—Ç—É—Ç–æ–≤'''
    list_institutes = []
    for i in institutes:
        name = i['name']
        list_institutes.append(name)
    return list_institutes


def name_courses(courses=[]):
    '''–•—Ä–∞–Ω–∏–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–Ω—Å—Ç–∏—Ç—É—Ç–æ–≤'''
    list_courses = []
    for i in courses:
        name = i['name']
        list_courses.append(name)
    return list_courses


def add_statistics(action: str):
    date_now = datetime.now(TZ_IRKUTSK).strftime('%d.%m.%Y')
    time_now = datetime.now(TZ_IRKUTSK).strftime('%H:%M')
    storage.save_statistics(action=action, date=date_now, time=time_now)


def name_groups(groups=[]):
    '''–•—Ä–∞–Ω–∏–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥—Ä—É–ø–ø'''
    list_groups = []
    for i in groups:
        name = i['name']
        list_groups.append(name)
    return list_groups


# ==================== –ü–û–ò–°–ö ==================== #

class SuperStates(BaseStateGroup):
    SEARCH = 0


@bot.on.message(state=SuperStates.SEARCH)  # StateRule(SuperStates.AWKWARD_STATE)
async def awkward_handler(ans: Message):
    '''–°—Ç–µ–π—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã –ø–æ–∏—Å–∫–∞'''
    global Condition_request
    chat_id = ans.from_id
    data = ans.text
    all_found_groups = []
    all_found_prep = []
    page = 1

    logger.info(f'Inline button data: {data}')

    if (storage.get_search_list(ans.text) or storage.get_search_list_prep(ans.text)) and Condition_request[chat_id] == []:
        print(Condition_request)
        request_group = storage.get_search_list(ans.text)
        request_prep = storage.get_search_list_prep(ans.text)
        for i in request_group:
            i['search'] = i.pop('name')
        for i in request_prep:
            i['search'] = i.pop('prep_short_name')
        request_word = ans.text
        request = request_group + request_prep
        keyboard = make_keyboard_search_group(page, request)
        for i in request_group:
            all_found_groups.append(i['search'].lower())
        for i in request_prep:
            all_found_prep.append(i['search'].lower())
        all_found_results = all_found_groups + all_found_prep
        list_search = [page, request_word, all_found_results]
        Condition_request[chat_id] = list_search
        await ans.answer("–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞", keyboard=keyboard)

    elif ans.text == "–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é":
        del Condition_request[ans.from_id]
        await ans.answer("–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é", keyboard=make_keyboard_start_menu())
        await bot.state_dispenser.delete(ans.peer_id)

    elif ans.text == "–î–∞–ª—å—à–µ":
        page = Condition_request[ans.from_id][0]
        Condition_request[ans.from_id][0] += 1
        request_word = Condition_request[ans.from_id][1]
        request_group = storage.get_search_list(request_word)
        request_prep = storage.get_search_list_prep(request_word)
        for i in request_group:
            i['search'] = i.pop('name')
        for i in request_prep:
            i['search'] = i.pop('prep_short_name')
        request = request_group + request_prep
        request = request[26 * page:]
        keyboard = make_keyboard_search_group(page + 1, request)
        await ans.answer(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}", keyboard=keyboard)

    elif ans.text == "<==–ù–∞–∑–∞–¥":
        Condition_request[ans.from_id][0] -= 1
        page = Condition_request[ans.from_id][0]
        request_word = Condition_request[ans.from_id][1]
        request_group = storage.get_search_list(request_word)
        request_prep = storage.get_search_list_prep(request_word)
        for i in request_group:
            i['search'] = i.pop('name')
        for i in request_prep:
            i['search'] = i.pop('prep_short_name')
        request = request_group + request_prep
        request = request[26 * (page - 1):]
        keyboard = make_keyboard_search_group(page, request)
        await ans.answer(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}", keyboard=keyboard)


    elif ('–ù–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é' == data or '–ù–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é' == data):
        group = Condition_request[ans.from_id][1]
        request_word = Condition_request[ans.from_id][1]
        request_group = storage.get_search_list(request_word)
        request_prep = storage.get_search_list_prep(request_word)
        if request_group:
            schedule = storage.get_schedule(group=group)
            print(schedule)
        elif request_prep:
            schedule = request_prep[0]
            print(schedule)
        if schedule['schedule'] == []:
            await ans.answer('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ‚è±')
            add_statistics(action=data)
            return

        schedule = schedule['schedule']
        week = find_week()

        # –º–µ–Ω—è–µ–º –Ω–µ–¥–µ–ª—é
        if data == '–ù–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é':
            week = 'odd' if week == 'even' else 'even'

        week_name = '—á–µ—Ç–Ω–∞—è' if week == 'odd' else '–Ω–µ—á–µ—Ç–Ω–∞—è'
        if request_group:
            schedule_str = full_schedule_in_str(schedule, week=week)
        elif request_prep:
            schedule_str = full_schedule_in_str_prep(schedule, week=week)

        await ans.answer(f'–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ {group}\n'
                         f'–ù–µ–¥–µ–ª—è: {week_name}', keyboard=make_keyboard_start_menu())

        for schedule in schedule_str:
            await ans.answer(f'{schedule}')
        await bot.state_dispenser.delete(ans.peer_id)


    elif (storage.get_search_list(ans.text) or storage.get_search_list_prep(ans.text)) and ans.text.lower() in (i for i in Condition_request[ans.from_id][2]):
        choose = ans.text
        Condition_request[ans.from_id][1] = choose
        request_word = Condition_request[ans.from_id][1]
        request_group = storage.get_search_list(request_word)
        request_prep = storage.get_search_list_prep(request_word)
        for i in request_group:
            i['search'] = i.pop('name')
        for i in request_prep:
            i['search'] = i.pop('prep_short_name')
        if request_group:
            await ans.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é –¥–ª—è –≥—Ä—É–ø–ø—ã {choose}", keyboard=make_keyboard_choose_schedule())
        elif request_prep:
            await ans.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {request_prep[0]['prep']}", keyboard=make_keyboard_choose_schedule())
        else:
            return

    else:
        if Condition_request[ans.from_id] and storage.get_search_list(ans.text) or storage.get_search_list_prep(ans.text):
            request_group = storage.get_search_list(ans.text)
            request_prep = storage.get_search_list_prep(ans.text)
            for i in request_group:
                i['search'] = i.pop('name')
            for i in request_prep:
                i['search'] = i.pop('prep_short_name')
            request_word = ans.text
            request = request_group + request_prep
            keyboard = make_keyboard_search_group(page, request)
            for i in request_group:
                all_found_groups.append(i['search'].lower())
            for i in request_prep:
                all_found_prep.append(i['search'].lower())
            all_found_results = all_found_groups + all_found_prep
            list_search = [page, request_word, all_found_results]
            Condition_request[chat_id] = list_search
            await ans.answer("–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞", keyboard=keyboard)

        else:
            if len(Condition_request[chat_id]) == 3:
                Condition_request[chat_id][1] = ''
                await ans.answer('–ü–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ üòï')
                return
            else:
                await ans.answer('–ü–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ üòï')
                return


# ==================== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ ==================== #

@bot.on.message(text="–ü–æ–∏—Å–∫ üîé")
async def die_handler(ans: Message):
    global Condition_request
    chat_id = ans.from_id
    Condition_request[chat_id] = []
    user = storage.get_user(chat_id=chat_id)
    if user:
        await bot.state_dispenser.set(ans.peer_id, SuperStates.SEARCH)
        await ans.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è\n'
                         '–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–ë–±-18-1 –∏–ª–∏ –ò–≤–∞–Ω–æ–≤', keyboard=make_keyboard_main_menu())
    else:
        await ans.answer('–ü—Ä–∏–≤–µ—Ç\n')
        await ans.answer('–î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –Ω–µ–±–æ–ª—å—à—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—éüòâ\n')
        await ans.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç–∏—Ç—É—Ç.', keyboard=make_keyboard_institutes(storage.get_institutes()))


# –ö–æ–º–∞–Ω–¥–∞ start
@bot.on.message(text=—Åontent_commands['text'])
async def start_message(ans: Message):
    chat_id = ans.from_id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if storage.get_user(chat_id):
        storage.delete_user_or_userdata(chat_id)  # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await ans.answer('–ü—Ä–∏–≤–µ—Ç\n')
    await ans.answer('–î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –Ω–µ–±–æ–ª—å—à—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—éüòâ\n')
    await ans.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç–∏—Ç—É—Ç.', keyboard=make_keyboard_institutes(storage.get_institutes()))

    add_statistics(action='start')


# –ö–æ–º–∞–Ω–¥–∞ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
@bot.on.message(text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')
async def registration(ans: Message):
    chat_id = ans.from_id
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if storage.get_user(chat_id):
        storage.delete_user_or_userdata(chat_id)  # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await ans.answer('–ü–æ–≤—Ç–æ—Ä–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—èüòâ\n')
    await ans.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç–∏—Ç—É—Ç.', keyboard=make_keyboard_institutes(storage.get_institutes()))

    add_statistics(action='reg')


# –ö–æ–º–∞–Ω–¥–∞ –ö–∞—Ä—Ç–∞
@bot.on.message(text=content_map['text'])
async def map(ans: Message):
    chat_id = ans.from_id
    await ans.answer('–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∫–∞—Ä—Ç–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...', keyboard=make_keyboard_start_menu())
    server = authorize.method("photos.getMessagesUploadServer")
    b = requests.post(server['upload_url'], files={'photo': open('map.jpg', 'rb')}).json()
    c = authorize.method('photos.saveMessagesPhoto', {'photo': b['photo'], 'server': b['server'], 'hash': b['hash']})[0]
    authorize.method("messages.send",
                     {"peer_id": chat_id, "attachment": f'photo{c["owner_id"]}_{c["id"]}', 'random_id': 0})

    add_statistics(action='map')


# –ö–æ–º–∞–Ω–¥–∞ –ê–≤—Ç–æ—Ä—ã
@bot.on.message(text='–ê–≤—Ç–æ—Ä—ã')
async def authors(ans: Message):
    chat_id = ans.from_id
    await ans.answer('–ê–≤—Ç–æ—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞:\n'
                     '-[id132677094|–ê–ª–µ–∫—Å–µ–π]\n'
                     '-[id128784852|–°—É–ª—Ç–∞–Ω]\n'
                     '-[id169584462|–ê–ª–µ–∫—Å–∞–Ω–¥—Ä] \n'
                     '-[id135615548|–í–ª–∞–¥–∏—Å–ª–∞–≤]\n'
                     '-[id502898628|–ö–∏—Ä–∏–ª–ª]\n\n'
                     '–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–æ–º –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º –ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. '
                     '–ë—É–¥–µ–º —Ä–∞–¥—ã üòâ\n', keyboard=make_keyboard_start_menu()
                     )

    add_statistics(action='authors')


@bot.on.message(text=content_types['text'])
async def scheduler(ans: Message):
    chat_id = ans.from_id
    data = ans.text
    user = storage.get_user(chat_id=chat_id)

    if '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ üóì' == data and user:
        await ans.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥\n', keyboard=make_keyboard_choose_schedule())
        add_statistics(action='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ')

    if ('–ù–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é' == data or '–ù–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é' == data) and user:
        group = storage.get_user(chat_id=chat_id)['group']
        schedule = storage.get_schedule(group=group)
        if schedule['schedule'] == []:
            await ans.answer('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ‚è±')
            add_statistics(action=data)
            return

        schedule = schedule['schedule']
        week = find_week()

        # –º–µ–Ω—è–µ–º –Ω–µ–¥–µ–ª—é
        if data == '–ù–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é':
            week = 'odd' if week == 'even' else 'even'

        week_name = '—á–µ—Ç–Ω–∞—è' if week == 'odd' else '–Ω–µ—á–µ—Ç–Ω–∞—è'

        schedule_str = full_schedule_in_str(schedule, week=week)
        await ans.answer(f'–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ {group}\n'
                         f'–ù–µ–¥–µ–ª—è: {week_name}', keyboard=make_keyboard_start_menu())

        for schedule in schedule_str:
            await ans.answer(f'{schedule}')

        add_statistics(action=data)



    elif '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è üçè' == data and user:
        group = storage.get_user(chat_id=chat_id)['group']
        schedule = storage.get_schedule(group=group)
        if not schedule:
            await ans.answer('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æüö´üò£\n'
                             '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ‚è±', keyboard=make_keyboard_start_menu())
            add_statistics(action='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è')
            return
        schedule = schedule['schedule']
        week = find_week()
        schedule_one_day = get_one_day_schedule_in_str(schedule=schedule, week=week)
        if not schedule_one_day:
            await ans.answer('–°–µ–≥–æ–¥–Ω—è –ø–∞—Ä –Ω–µ—Ç üòé')
            return
        await ans.answer(f'{schedule_one_day}')
        add_statistics(action='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è')

    elif '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ üçé' == data and user:
        group = storage.get_user(chat_id=chat_id)['group']
        schedule = storage.get_schedule(group=group)
        if not schedule:
            await ans.answer('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æüö´üò£\n'
                             '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ‚è±', keyboard=make_keyboard_start_menu())
            add_statistics(action='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞')
            return
        schedule = schedule['schedule']
        week = find_week()
        if datetime.today().isoweekday() == 7:
            if week == 'odd':
                week = 'even'
            elif week == 'even':
                week = 'odd'
            else:
                week = 'all'

        schedule_next_day = get_next_day_schedule_in_str(schedule=schedule, week=week)
        if not schedule_next_day:
            await ans.answer('–ó–∞–≤—Ç—Ä–∞ –ø–∞—Ä –Ω–µ—Ç üòé')
            return
        await ans.answer(f'{schedule_next_day}')
        add_statistics(action='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞')

    elif '–ë–ª–∏–∂–∞–π—à–∞—è –ø–∞—Ä–∞ ‚è±' in data and user:
        await ans.answer('–ë–ª–∏–∂–∞–π—à–∞—è –ø–∞—Ä–∞', keyboard=make_keyboard_nearlesson())
        add_statistics(action='–ë–ª–∏–∂–∞–π—à–∞—è –ø–∞—Ä–∞')
        return


    elif '–¢–µ–∫—É—â–∞—è' in data and user:
        group = storage.get_user(chat_id=chat_id)['group']
        schedule = storage.get_schedule(group=group)
        if not schedule:
            await ans.answer('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æüö´üò£\n'
                             '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ‚è±', keyboard=make_keyboard_start_menu())
            add_statistics(action='–¢–µ–∫—É—â–∞—è')
            return
        schedule = schedule['schedule']
        week = find_week()

        now_lessons = get_now_lesson(schedule=schedule, week=week)
        print(now_lessons)

        # –µ—Å–ª–∏ –ø–∞—Ä –Ω–µ—Ç
        if not now_lessons:
            await ans.answer('–°–µ–π—á–∞—Å –ø–∞—Ä—ã –Ω–µ—Ç, –º–æ–∂–µ—Ç–µ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å)', keyboard=make_keyboard_start_menu())
            add_statistics(action='–¢–µ–∫—É—â–∞—è')
            return

        now_lessons_str = ''
        for near_lesson in now_lessons:
            name = near_lesson['name']
            if name == '—Å–≤–æ–±–æ–¥–Ω–æ':
                await ans.answer('–°–µ–π—á–∞—Å –ø–∞—Ä—ã –Ω–µ—Ç, –º–æ–∂–µ—Ç–µ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å)', keyboard=make_keyboard_start_menu())
                return
            now_lessons_str += '-------------------------------------------\n'
            aud = near_lesson['aud']
            if aud:
                aud = f'–ê—É–¥–∏—Ç–æ—Ä–∏—è: {aud}\n'
            time = near_lesson['time']
            info = near_lesson['info'].replace(",", "")
            prep = near_lesson['prep']

            now_lessons_str += f'{time}\n' \
                               f'{aud}' \
                               f'üëâ{name}\n' \
                               f'{info} {prep}\n'
        now_lessons_str += '-------------------------------------------\n'
        await ans.answer(f'üß†–¢–µ–∫—É—â–∞—è –ø–∞—Ä–∞üß†\n'f'{now_lessons_str}', keyboard=make_keyboard_start_menu())

        add_statistics(action='–¢–µ–∫—É—â–∞—è')

    elif '–°–ª–µ–¥—É—é—â–∞—è' in data and user:
        group = storage.get_user(chat_id=chat_id)['group']
        schedule = storage.get_schedule(group=group)
        if not schedule:
            await ans.answer('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æüö´üò£\n'
                             '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ‚è±', keyboard=make_keyboard_start_menu())
            add_statistics(action='–°–ª–µ–¥—É—é—â–∞—è')
            return
        schedule = schedule['schedule']
        week = find_week()

        near_lessons = get_near_lesson(schedule=schedule, week=week)

        # –µ—Å–ª–∏ –ø–∞—Ä –Ω–µ—Ç
        if not near_lessons:
            await ans.answer('–°–µ–≥–æ–¥–Ω—è –±–æ–ª—å—à–µ –ø–∞—Ä –Ω–µ—Ç üòé', keyboard=make_keyboard_start_menu())
            add_statistics(action='–°–ª–µ–¥—É—é—â–∞—è')
            return

        near_lessons_str = ''
        for near_lesson in near_lessons:
            name = near_lesson['name']
            if name == '—Å–≤–æ–±–æ–¥–Ω–æ':
                await ans.answer('–°–µ–≥–æ–¥–Ω—è –±–æ–ª—å—à–µ –ø–∞—Ä –Ω–µ—Ç üòé', keyboard=make_keyboard_start_menu())
                return
            near_lessons_str += '-------------------------------------------\n'
            aud = near_lesson['aud']
            if aud:
                aud = f'–ê—É–¥–∏—Ç–æ—Ä–∏—è: {aud}\n'
            time = near_lesson['time']
            info = near_lesson['info'].replace(",", "")
            prep = near_lesson['prep']

            near_lessons_str += f'{time}\n' \
                                f'{aud}' \
                                f'üëâ{name}\n' \
                                f'{info} {prep}\n'
        near_lessons_str += '-------------------------------------------\n'
        await ans.answer(f'üß†–ë–ª–∏–∂–∞–π—à–∞—è –ø–∞—Ä–∞üß†\n'f'{near_lessons_str}', keyboard=make_keyboard_start_menu())

        add_statistics(action='–°–ª–µ–¥—É—é—â–∞—è')


@bot.on.message()
async def wrapper(ans: Message):
    '''–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'''
    chat_id = ans.from_id
    message_inst = ans.text
    message = ans.text
    user = storage.get_user(chat_id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –º–µ—Å—Å–µ–¥–∂ –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–Ω–∏–≤–µ—Ä –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    institutes = name_institutes(storage.get_institutes())
    for institute in institutes:
        if len(message_inst) > 5:
            if message_inst[:-5] in institute:
                message_inst = institute

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if not user:
        institutes = name_institutes(storage.get_institutes())
        # –°–º–æ—Ç—Ä–∏–º –≤—ã–±—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–Ω—Å—Ç–∏—Ç—É—Ç
        if message_inst in institutes:
            # –ï—Å–ª–∏ –¥–∞, —Ç–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–¥
            storage.save_or_update_user(chat_id=chat_id, institute=message_inst)
            await ans.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏: {message_inst}\n')
            await ans.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å.',
                             keyboard=make_keyboard_choose_course_vk(storage.get_courses(message_inst)))
        else:
            await ans.answer('–†–∞–¥–∏ —Ç–≤–æ–µ–≥–æ —É–¥–æ–±—Å—Ç–≤–∞, —è –≤—ã–≤–µ–ª –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∏–Ω—Å—Ç–∏—É—Ç–æ–≤ –Ω–∏–∂–µ üò∏üëáüèª',
                             keyboard=make_keyboard_institutes(storage.get_institutes()))
        return

    # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥ –∫ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞–º
    if message == "–ù–∞–∑–∞–¥ –∫ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞–º" and not 'course' in user.keys():
        await ans.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç–∏—Ç—É—Ç.', keyboard=make_keyboard_institutes(storage.get_institutes()))
        storage.delete_user_or_userdata(chat_id=chat_id)
        return

    # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥ –∫ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞–º
    if message == "–ù–∞–∑–∞–¥ –∫ –∫—É—Ä—Å–∞–º" and not 'group' in user.keys():

        await ans.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å.', keyboard=make_keyboard_choose_course_vk(
            storage.get_courses(storage.get_user(chat_id=chat_id)['institute'])))
        storage.delete_user_or_userdata(chat_id=chat_id, delete_only_course=True)
        return

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞
    elif not 'course' in user.keys():
        institute = user['institute']
        course = storage.get_courses(institute)

        # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –∫—É—Ä—Å–∞
        if message in name_courses(course):
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫—É—Ä—Å
            storage.save_or_update_user(chat_id=chat_id, course=message)
            groups = storage.get_groups(institute=institute, course=message)
            groups = name_groups(groups)
            await ans.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏: {message}\n')
            await ans.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É.', keyboard=make_keyboard_choose_group_vk(groups))
        else:
            await ans.answer('–ù–µ –æ–≥–æ—Ä—á–∞–π –º–µ–Ω—è, —è –∂–µ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫ —Å—Ç–∞—Ä–∞–ª—Å—è –Ω–∞–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π üòºüëáüèª')
        return
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞
    elif not 'group' in user.keys():
        institute = user['institute']
        course = user['course']
        groups = storage.get_groups(institute=institute, course=course)
        groups = name_groups(groups)
        # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –≥—Ä—É–ø–ø—ã
        if message in groups:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É
            storage.save_or_update_user(chat_id=chat_id, group=message)
            await ans.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!üòä\n\n'
                             '–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–≤—Ç–æ—Ä–Ω–æ, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"\n'
                             , keyboard=make_keyboard_start_menu())
        else:
            if message == "–î–∞–ª–µ–µ":
                await ans.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É.', keyboard=make_keyboard_choose_group_vk_page_2(groups))
            elif message == "–ù–∞–∑–∞–¥":
                await ans.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É.', keyboard=make_keyboard_choose_group_vk(groups))
            else:
                await ans.answer('–Ø –æ—á–µ–Ω—å —Å–æ–º–Ω–µ–≤–∞—é—Å—å, —á—Ç–æ —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø—ã –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –Ω–∏–∂–µ üòâ')
        return

    elif '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ üì£' in message and user:
        time = user['notifications']
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        if not time:
            time = 0
        await ans.answer(f'{get_notifications_status(time)}', keyboard=make_inline_keyboard_notifications())

        add_statistics(action='–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ')

    elif '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' in message and user:
        time = user['notifications']
        await ans.answer('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ‚öô\n\n'
                         '–£–∫–∞–∂–∏—Ç–µ –∑–∞ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ –ø–∞—Ä—ã –¥–æ–ª–∂–Ω–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',
                         keyboard=make_inline_keyboard_set_notifications(time))
        add_statistics(action='–ù–∞—Å—Ç—Ä–æ–π–∫–∏')

    elif '-' == message:
        time = user['notifications']
        if time == 0:
            await ans.answer('–•–æ—á–µ—à—å —É–π—Ç–∏ –≤ –º–∏–Ω—É—Å?', keyboard=make_inline_keyboard_set_notifications(time))
            return
        time -= 5
        # –û—Ç–Ω–∏–º–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        if time <= 0:
            time = 0
        storage.save_or_update_user(chat_id=chat_id, notifications=time)
        await ans.answer('–ú–∏–Ω—É—Å 5 –º–∏–Ω—É—Ç', keyboard=make_inline_keyboard_set_notifications(time))
        return

    elif '+' == message:
        time = user['notifications']
        time += 5
        storage.save_or_update_user(chat_id=chat_id, notifications=time)
        await ans.answer('–ü–ª—é—Å 5 –º–∏–Ω—É—Ç', keyboard=make_inline_keyboard_set_notifications(time))

    elif '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' in message:

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑—É
        time = user['notifications']

        group = storage.get_user(chat_id=chat_id)['group']

        schedule = storage.get_schedule(group=group)['schedule']
        if time > 0:
            reminders = calculating_reminder_times(schedule=schedule, time=int(time))
        else:
            reminders = []
        storage.save_or_update_user(chat_id=chat_id, notifications=time, reminders=reminders)

        await ans.answer(f'{get_notifications_status(time)}', keyboard=make_keyboard_start_menu())


    elif '–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é' in message and user:
        await ans.answer('–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é', keyboard=make_keyboard_start_menu())
        add_statistics(action='–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é')

    elif '<==–ù–∞–∑–∞–¥' == message and user:
        await ans.answer('–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é', keyboard=make_keyboard_start_menu())

    elif '–î–∞–ª–µ–µ' in message:
        await ans.answer('–î–∞–ª–µ–µ', keyboard=make_keyboard_choose_group_vk_page_2())


    elif '–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥' == message and user:
        await ans.answer('–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n'
                         '–ê–≤—Ç–æ—Ä—ã - —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–æ–≤ \n'
                         '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è- –ø–æ–≤—Ç–æ—Ä–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n'
                         '–ö–∞—Ä—Ç–∞ - –∫–∞—Ä—Ç–∞ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞', keyboard=make_keyboard_commands())

        add_statistics(action='help')
        return

    elif '–î—Ä—É–≥–æ–µ ‚ö°' == message and user:
        await ans.answer('–î—Ä—É–≥–æ–µ', keyboard=make_keyboard_extra())

        add_statistics(action='help')
        return



    else:
        await ans.answer('–¢–∞–∫–æ–º—É –µ—â—ë –Ω–µ –Ω–∞—É—á–∏–ª–∏ üòá, –∑–Ω–∞—é —Ç–æ–ª—å–∫–æ —ç—Ç–∏ –∫–æ–º–∞–Ω–¥—ã:\n'
                         '–ê–≤—Ç–æ—Ä—ã - —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–æ–≤ \n'
                         '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è - –ø–æ–≤—Ç–æ—Ä–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n'
                         '–ö–∞—Ä—Ç–∞ - –∫–∞—Ä—Ç–∞ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞', keyboard=make_keyboard_start_menu())
        add_statistics(action='bullshit')


def main():
    '''–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞'''
    bot.run_forever()


if __name__ == "__main__":
    main()
