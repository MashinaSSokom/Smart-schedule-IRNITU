from vk_api import vk_api
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
from vk_api.keyboard import VkKeyboard, VkKeyboardColor
from vk_api.longpoll import VkLongPoll, VkEventType
from functions.creating_schedule import full_schedule_in_str, get_one_day_schedule_in_str
from vkbottle.bot import Bot, Message
from functions.storage import MongodbService
from vkbottle.keyboard import Keyboard, Text
from vkbottle.api.keyboard import keyboard_gen
from vkbottle.ext import Middleware
import vk
import json
import typing
from aiohttp import web
import os

MAX_CALLBACK_RANGE = 41
storage = MongodbService().get_instance()
bot = Bot(f"{os.environ.get('VK')}", debug="DEBUG")  # TOKEN


def parametres_for_buttons_start_menu_vk(text, color):
    '''–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–Ω–æ–ø–æ–∫'''
    return {
        "action": {
            "type": "text",
            "payload": "{\"button\": \"" + "1" + "\"}",
            "label": f"{text}"
        },
        "color": f"{color}"
    }


def make_keyboard_start_menu():
    """–°–æ–∑–¥–∞—ë–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏"""
    keyboard = Keyboard(one_time=False)
    keyboard.add_row()
    keyboard.add_button(Text(label="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"), color="primary")
    keyboard.add_button(Text(label="–ë–ª–∏–∂–∞–π—à–∞—è –ø–∞—Ä–∞"), color="primary")
    keyboard.add_row()
    keyboard.add_button(Text(label="–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"), color="default")
    return keyboard


def make_keyboard_institutes(institutes=[]):
    """–ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞"""
    keyboard = {
        "one_time": False
    }
    list_keyboard_main = []
    for institute in institutes:
        if len(institute['name']) >= MAX_CALLBACK_RANGE:
            name = sep_space(institute['name'])
        else:
            name = institute['name']
        list_keyboard = []
        list_keyboard.append(parametres_for_buttons_start_menu_vk(f'{name}', 'primary'))
        list_keyboard_main.append(list_keyboard)
    keyboard['buttons'] = list_keyboard_main
    keyboard = json.dumps(keyboard, ensure_ascii=False).encode('utf-8')
    keyboard = str(keyboard.decode('utf-8'))
    return keyboard


def make_keyboard_choose_course_vk(courses):
    '''–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞'''
    keyboard = {
        "one_time": False
    }
    list_keyboard_main = []
    for course in courses:
        name = course['name']
        list_keyboard = []
        list_keyboard.append(parametres_for_buttons_start_menu_vk(f'{name}', 'primary'))
        list_keyboard_main.append(list_keyboard)
    keyboard['buttons'] = list_keyboard_main
    keyboard = json.dumps(keyboard, ensure_ascii=False).encode('utf-8')
    keyboard = str(keyboard.decode('utf-8'))
    return keyboard


def make_keyboard_choose_group_vk(groups=[]):
    """–ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞"""
    keyboard = {
        "one_time": False
    }
    list_keyboard_main_2 = []
    list_keyboard_main = []
    list_keyboard = []
    overflow = 0
    for group in groups:
        overflow += 1
        if overflow == 27:
            list_keyboard_main.append(list_keyboard)
            list_keyboard = []
            list_keyboard.append(parametres_for_buttons_start_menu_vk('–î–∞–ª–µ–µ', 'primary'))
            list_keyboard_main.append(list_keyboard)
        else:
            if overflow < 28:
                if len(list_keyboard) == 3:
                    list_keyboard_main.append(list_keyboard)
                    list_keyboard = []
                    list_keyboard.append(parametres_for_buttons_start_menu_vk(f'{group}', 'primary'))
                else:
                    list_keyboard.append(parametres_for_buttons_start_menu_vk(f'{group}', 'primary'))
            else:
                list_keyboard = []
                list_keyboard.append(parametres_for_buttons_start_menu_vk(f'{group}', 'primary'))
                list_keyboard_main_2.append(parametres_for_buttons_start_menu_vk(f'{group}', 'primary'))

    if overflow < 28:
        list_keyboard_main.append(list_keyboard)
    else:
        list_keyboard_main_2.append(list_keyboard)

    keyboard['buttons'] = list_keyboard_main
    keyboard = json.dumps(keyboard, ensure_ascii=False).encode('utf-8')
    keyboard = str(keyboard.decode('utf-8'))

    return keyboard


def make_keyboard_choose_group_vk_page_2(groups=[]):
    '''–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥—Ä—É–ø–ø –ø–æ—Å–ª–µ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π'''
    keyboard = {
        "one_time": False
    }
    groups = groups[26:]
    list_keyboard_main = []
    list_keyboard = []
    for group in groups:
        if len(list_keyboard) == 3:
            list_keyboard_main.append(list_keyboard)
            list_keyboard = []
        else:
            list_keyboard.append(parametres_for_buttons_start_menu_vk(f'{group}', 'primary'))
    list_keyboard_main.append(list_keyboard)
    list_keyboard_main.append([parametres_for_buttons_start_menu_vk('–ù–∞–∑–∞–¥', 'primary')])

    keyboard['buttons'] = list_keyboard_main
    keyboard = json.dumps(keyboard, ensure_ascii=False).encode('utf-8')
    keyboard = str(keyboard.decode('utf-8'))
    return keyboard


def sep_space(name):
    '''–û–±—Ä–µ–∑–∞–µ—Ç –¥–ª–∏–Ω—É –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞, –µ—Å–ª–∏ —Ç–æ—Ç –±–æ–ª—å—à–µ 40 —Å–∏–º–≤–æ–ª–æ–≤'''
    dlina = abs(len(name) - MAX_CALLBACK_RANGE)
    name = name[:len(name) - dlina - 5]
    return name


def name_institutes(institutes=[]):
    '''–•—Ä–∞–Ω–∏–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–Ω—Å—Ç–∏—Ç—É—Ç–æ–≤'''
    list_institutes = []
    for i in institutes:
        name = i['name']
        list_institutes.append(name)
    return list_institutes


def name_courses(courses=[]):
    '''–•—Ä–∞–Ω–∏–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–Ω—Å—Ç–∏—Ç—É—Ç–æ–≤'''
    list_courses = []
    for i in courses:
        name = i['name']
        list_courses.append(name)
    return list_courses


def name_groups(groups=[]):
    '''–•—Ä–∞–Ω–∏–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥—Ä—É–ø–ø'''
    list_groups = []
    for i in groups:
        name = i['name']
        list_groups.append(name)
    return list_groups


@bot.on.message(text='/start')
async def start(ans: Message):
    '''–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'''
    chat_id = ans.from_id
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if storage.get_user(chat_id):
        storage.delete_user_or_userdata(chat_id)  # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await ans('–ü—Ä–∏–≤–µ—Ç\n')
    await ans('–î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –Ω–µ–±–æ–ª—å—à—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—éüòâ\n')
    await ans('–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç–∏—Ç—É—Ç.', keyboard=make_keyboard_institutes(storage.get_institutes()))


@bot.on.message(text='/reg')
async def wrapper(ans: Message):
    '''–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'''
    chat_id = ans.from_id
    message = ans.text
    user = storage.get_user(chat_id)
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if not user:
        institutes = name_institutes(storage.get_institutes())
        # –°–º–æ—Ç—Ä–∏–º –≤—ã–±—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–Ω—Å—Ç–∏—Ç—É—Ç
        if message in institutes:
            # –ï—Å–ª–∏ –¥–∞, —Ç–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–¥
            storage.save_or_update_user(chat_id=chat_id, institute=message)
            await ans('–ù–∞–π—Å\n')
            await ans('–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å.', keyboard=make_keyboard_choose_course_vk(storage.get_courses(message)))
        else:
            await ans('–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é\n')
        return
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞
    elif not 'course' in user.keys():
        institute = user['institute']
        course = storage.get_courses(institute)
        # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –∫—É—Ä—Å–∞
        if message in name_courses(course):
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫—É—Ä—Å
            storage.save_or_update_user(chat_id=chat_id, course=message)
            groups = storage.get_groups(institute=institute, course=message)
            groups = name_groups(groups)
            await ans('–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É.', keyboard=make_keyboard_choose_group_vk(groups))
            await ans('–ù–∞–π—Å2\n')
        else:
            await ans('–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é\n')
        return
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞
    elif not 'group' in user.keys():
        institute = user['institute']
        course = user['course']
        groups = storage.get_groups(institute=institute, course=course)
        groups = name_groups(groups)
        # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –≥—Ä—É–ø–ø—ã
        if message in groups:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É
            storage.save_or_update_user(chat_id=chat_id, group=message)
            await ans('–ö–æ–Ω–≥—Ä–∞—Ç.', keyboard=make_keyboard_start_menu())
        else:
            if message == "–î–∞–ª–µ–µ":
                await ans('–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É.', keyboard=make_keyboard_choose_group_vk_page_2(groups))
            elif message == "–ù–∞–∑–∞–¥":
                await ans('–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É.', keyboard=make_keyboard_choose_group_vk(groups))
            else:
                await ans('–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é\n')
        return


@bot.on.message(text='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ')
async def scheduler(ans: Message):
    chat_id = ans.from_id
    message = ans.text
    user = storage.get_user(chat_id)
    group = storage.get_user(chat_id=chat_id)['group']
    schedule = storage.get_schedule(group=group)
    schedule = schedule['schedule']
    schedule_str = full_schedule_in_str(schedule, week=week)

    week = find_week()


def main():
    '''–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞'''
    bot.run_polling()


if __name__ == "__main__":
    main()
