import types
from functions.calculating_reminder_times import calculating_reminder_times
from vk_api import vk_api
from vk_api.utils import get_random_id
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
from vk_api.keyboard import VkKeyboard, VkKeyboardColor
from vk_api.longpoll import VkLongPoll, VkEventType
from functions.creating_schedule import full_schedule_in_str, get_one_day_schedule_in_str
from functions.find_week import find_week
from functions.near_lesson import get_near_lesson
from vkbottle.bot import Bot, Message
from functions.storage import MongodbService
from vkbottle.keyboard import Keyboard, Text
from vkbottle.api.keyboard import keyboard_gen
from vkbottle.ext import Middleware
import vk
import json
import typing
from aiohttp import web
import os

API_VERSION = '5.124'
GROUP_ID = '198983266'
token = os.environ.get('VK')
authorize = vk_api.VkApi(token=token, api_version=API_VERSION)
vk = authorize.get_api()
longpoll = VkBotLongPoll(authorize, group_id=GROUP_ID)


# authorize = vk_api.VkApi(token=token)
# longpoll = VkLongPoll(authorize)

CALLBACK_TYPES = ('show_snackbar', 'open_link', 'open_app')

MAX_CALLBACK_RANGE = 41
storage = MongodbService().get_instance()
bot = Bot(f"{os.environ.get('VK')}", debug="DEBUG")  # TOKEN

content_types = {'text': ['–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', '–ë–ª–∏–∂–∞–π—à–∞—è –ø–∞—Ä–∞', '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è']}
over = 0
def parametres_for_buttons_start_menu_vk(text, color):
    '''–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–Ω–æ–ø–æ–∫'''
    return {
        "action": {
            "type": "text",
            "payload": "{\"button\": \"" + "1" + "\"}",
            "label": f"{text}"
        },
        "color": f"{color}"
    }


def get_notifications_status(time):
    """–°—Ç–∞—Ç—É—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    if not time or time == 0:
        notifications_status = '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã ‚ùå\n' \
                               '–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å'
    else:
        notifications_status = f'–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã ‚úÖ\n' \
                               f'–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–¥—ë—Ç –∑–∞ {time} –º–∏–Ω –¥–æ –Ω–∞—á–∞–ª–∞ –ø–∞—Ä—ã üòá'
    return notifications_status


def make_inline_keyboard_notifications():
    """–ö–Ω–æ–ø–∫–∞ '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'"""
    keyboard = Keyboard(one_time=False)
    keyboard.add_row()
    keyboard.add_button(Text(label='<==–ù–∞–∑–∞–¥'), color="primary")
    return keyboard


def make_keyboard_start_menu():
    """–°–æ–∑–¥–∞—ë–º –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏"""
    keyboard = Keyboard(one_time=False)
    keyboard.add_row()
    keyboard.add_button(Text(label="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"), color="primary")
    keyboard.add_button(Text(label="–ë–ª–∏–∂–∞–π—à–∞—è –ø–∞—Ä–∞"), color="primary")
    keyboard.add_row()
    keyboard.add_button(Text(label="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"), color="default")
    keyboard.add_button(Text(label="–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"), color="default")
    return keyboard


def make_keyboard_institutes(institutes=[]):
    """–ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞"""
    keyboard = {
        "one_time": False
    }
    list_keyboard_main = []
    for institute in institutes:
        if len(institute['name']) >= MAX_CALLBACK_RANGE:
            name = sep_space(institute['name'])
        else:
            name = institute['name']
        list_keyboard = []
        list_keyboard.append(parametres_for_buttons_start_menu_vk(f'{name}', 'primary'))
        list_keyboard_main.append(list_keyboard)
    keyboard['buttons'] = list_keyboard_main
    keyboard = json.dumps(keyboard, ensure_ascii=False).encode('utf-8')
    keyboard = str(keyboard.decode('utf-8'))
    return keyboard


def make_keyboard_choose_course_vk(courses):
    '''–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞'''
    keyboard = {
        "one_time": False
    }
    list_keyboard_main = []
    for course in courses:
        name = course['name']
        list_keyboard = []
        list_keyboard.append(parametres_for_buttons_start_menu_vk(f'{name}', 'primary'))
        list_keyboard_main.append(list_keyboard)
    keyboard['buttons'] = list_keyboard_main
    keyboard = json.dumps(keyboard, ensure_ascii=False).encode('utf-8')
    keyboard = str(keyboard.decode('utf-8'))
    return keyboard


def make_keyboard_choose_group_vk(groups=[]):
    """–ö–Ω–æ–ø–∫–∏ –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞"""
    keyboard = {
        "one_time": False
    }
    list_keyboard_main_2 = []
    list_keyboard_main = []
    list_keyboard = []
    overflow = 0
    for group in groups:
        overflow += 1
        if overflow == 27:
            list_keyboard_main.append(list_keyboard)
            list_keyboard = []
            list_keyboard.append(parametres_for_buttons_start_menu_vk('–î–∞–ª–µ–µ', 'primary'))
            list_keyboard_main.append(list_keyboard)
        else:
            if overflow < 28:
                if len(list_keyboard) == 3:
                    list_keyboard_main.append(list_keyboard)
                    list_keyboard = []
                    list_keyboard.append(parametres_for_buttons_start_menu_vk(f'{group}', 'primary'))
                else:
                    list_keyboard.append(parametres_for_buttons_start_menu_vk(f'{group}', 'primary'))
            else:
                list_keyboard = []
                list_keyboard.append(parametres_for_buttons_start_menu_vk(f'{group}', 'primary'))
                list_keyboard_main_2.append(parametres_for_buttons_start_menu_vk(f'{group}', 'primary'))

    if overflow < 28:
        list_keyboard_main.append(list_keyboard)
    else:
        list_keyboard_main_2.append(list_keyboard)

    keyboard['buttons'] = list_keyboard_main
    keyboard = json.dumps(keyboard, ensure_ascii=False).encode('utf-8')
    keyboard = str(keyboard.decode('utf-8'))

    return keyboard


def make_keyboard_choose_schedule():
    keyboard = Keyboard(one_time=False)
    keyboard.add_row()
    keyboard.add_button(Text(label="–ù–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é"), color="primary")
    keyboard.add_button(Text(label="–ù–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é"), color="primary")
    keyboard.add_row()
    keyboard.add_button(Text(label="–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é"), color="default")
    return keyboard


def make_keyboard_choose_group_vk_page_2(groups=[]):
    '''–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≥—Ä—É–ø–ø –ø–æ—Å–ª–µ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π'''
    keyboard = {
        "one_time": False
    }
    groups = groups[26:]
    list_keyboard_main = []
    list_keyboard = []
    for group in groups:
        if len(list_keyboard) == 3:
            list_keyboard_main.append(list_keyboard)
            list_keyboard = []
        else:
            list_keyboard.append(parametres_for_buttons_start_menu_vk(f'{group}', 'primary'))
    list_keyboard_main.append(list_keyboard)
    list_keyboard_main.append([parametres_for_buttons_start_menu_vk('–ù–∞–∑–∞–¥', 'primary')])

    keyboard['buttons'] = list_keyboard_main
    keyboard = json.dumps(keyboard, ensure_ascii=False).encode('utf-8')
    keyboard = str(keyboard.decode('utf-8'))
    return keyboard


def sep_space(name):
    '''–û–±—Ä–µ–∑–∞–µ—Ç –¥–ª–∏–Ω—É –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞, –µ—Å–ª–∏ —Ç–æ—Ç –±–æ–ª—å—à–µ 40 —Å–∏–º–≤–æ–ª–æ–≤'''
    dlina = abs(len(name) - MAX_CALLBACK_RANGE)
    name = name[:len(name) - dlina - 5]
    return name


def name_institutes(institutes=[]):
    '''–•—Ä–∞–Ω–∏–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–Ω—Å—Ç–∏—Ç—É—Ç–æ–≤'''
    list_institutes = []
    for i in institutes:
        name = i['name']
        list_institutes.append(name)
    return list_institutes


def name_courses(courses=[]):
    '''–•—Ä–∞–Ω–∏–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–Ω—Å—Ç–∏—Ç—É—Ç–æ–≤'''
    list_courses = []
    for i in courses:
        name = i['name']
        list_courses.append(name)
    return list_courses


def name_groups(groups=[]):
    '''–•—Ä–∞–Ω–∏–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥—Ä—É–ø–ø'''
    list_groups = []
    for i in groups:
        name = i['name']
        list_groups.append(name)
    return list_groups


def listening():
    '''–ñ–¥—ë—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ'''
    for event in longpoll.listen():
        if event.type == VkEventType.MESSAGE_NEW:
            if event.to_me:
                message = event.text
                return message


def data_number_wait():
    while True:
        data = listening()
        if data.isdigit():
            return data
        elif '<==–ù–∞–∑–∞–¥' in data:
            return data
        else:
            return 0

# @bot.on.message(text='/call')
# async def start(ans: Message):
#
# # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ–±–æ–∏—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä
#
#     settings = dict(one_time=False, inline=True)
#
#     # ‚Ññ1. –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å 3 –∫–Ω–æ–ø–∫–∞–º–∏: "–ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", "–æ—Ç–∫—Ä—ã—Ç—å URL" –∏ –∏–∑–º–µ–Ω–∏—Ç—å –º–µ–Ω—é (—Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–∏–ø)
#     keyboard_1 = VkKeyboard(**settings)
#     # pop-up –∫–Ω–æ–ø–∫–∞
#     keyboard_1.add_callback_button(label='–ü–æ–∫–∞–∂–∏ pop-up —Å–æ–æ–±—â–µ–Ω–∏–µ', color=VkKeyboardColor.SECONDARY,
#                                    payload={"type": "show_snackbar", "text": "–≠—Ç–æ –∏—Å—á–µ–∑–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"})
#     keyboard_1.add_line()
#     # –∫–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞ 2–æ–µ –º–µ–Ω—é
#     keyboard_1.add_callback_button(label='–î–æ–±–∞–≤–∏—Ç—å –∫—Ä–∞—Å–Ω–æ–≥–æ ', color=VkKeyboardColor.POSITIVE,
#                                    payload={"type": "my_own_100500_type_edit"})
#
#     # ‚Ññ2. –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ–¥–Ω–æ–π –∫—Ä–∞—Å–Ω–æ–π callback-–∫–Ω–æ–ø–∫–æ–π. –ù–∞–∂–∞—Ç–∏–µ –∏–∑–º–µ–Ω—è–µ—Ç –º–µ–Ω—é –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ.
#     keyboard_2 = VkKeyboard(**settings)
#     # –∫–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –Ω–∞–∑–∞–¥, –Ω–∞ 1–æ–µ –º–µ–Ω—é.
#     keyboard_2.add_callback_button('–ù–∞–∑–∞–¥', color=VkKeyboardColor.NEGATIVE, payload={"type": "my_own_100500_type_edit"})
#
#
#     f_toggle: bool = False
#     for event in longpoll.listen():
#         # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–Ω—é 1–≥–æ –≤–∏–¥–∞ –Ω–∞ –ª—é–±–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
#         if event.type == VkBotEventType.MESSAGE_NEW:
#             if event.obj.message['text'] != '':
#                 if event.from_user:
#                     # –ï—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç callback-–∫–Ω–æ–ø–∫–∏,
#                     # –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –Ω–∏—Ö –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–µ
#                     # —Å–æ–æ–±—â–µ–Ω–∏—è. –¢.–µ. –æ–Ω–∏ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∫–∞–∫ –æ–±—ã—á–Ω—ã–µ inline –∫–Ω–æ–ø–∫–∏.
#                     if 'callback' not in event.obj.client_info['button_actions']:
#                         print(f'–ö–ª–∏–µ–Ω—Ç {event.obj.message["from_id"]} –Ω–µ –ø–æ–¥–¥–µ—Ä–∂. callback')
#
#                     vk.messages.send(
#                         user_id=event.obj.message['from_id'],
#                         random_id=get_random_id(),
#                         peer_id=event.obj.message['from_id'],
#                         keyboard=keyboard_1.get_keyboard(),
#                         message=event.obj.message['text'])
#         # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–ª–∏–∫–∏ –ø–æ callback –∫–Ω–æ–ø–∫–∞–º
#         elif event.type == VkBotEventType.MESSAGE_EVENT:
#             # –µ—Å–ª–∏ —ç—Ç–æ –æ–¥–Ω–æ –∏–∑ 3—Ö –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π:
#             if event.object.payload.get('type') in CALLBACK_TYPES:
#                 # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–µ—Ä–≤–µ—Ä—É —É–∫–∞–∑–∞–Ω–∏—è –∫–∞–∫ –∫–∞–∫—É—é –∏–∑ –∫–Ω–æ–ø–æ–∫ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å. –≠—Ç–æ –∑–∞–ª–æ–∂–µ–Ω–æ –≤
#                 # payload –∫–∞–∂–¥–æ–π callback-–∫–Ω–æ–ø–∫–∏ –ø—Ä–∏ –µ–µ —Å–æ–∑–¥–∞–Ω–∏–∏.
#                 # –ù–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∏–Ω–∞—á–µ: –≤ payload –ø–æ–ª–æ–∂–∏—Ç—å —Å–≤–æ–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ
#                 # –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä—ã –∫–Ω–æ–ø–æ–∫, –∞ –∑–¥–µ—Å—å –ø–æ –Ω–∏–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å
#                 # –∫–∞–∫–æ–π –∑–∞–ø—Ä–æ—Å –Ω–∞–¥–æ –ø–æ—Å–ª–∞—Ç—å. –†–µ–∞–ª–∏–∑–æ–≤–∞–Ω –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç.
#                 r = vk.messages.sendMessageEventAnswer(
#                     event_id=event.object.event_id,
#                     user_id=event.object.user_id,
#                     peer_id=event.object.peer_id,
#                     event_data=json.dumps(event.object.payload))
#             # –µ—Å–ª–∏ —ç—Ç–æ –Ω–∞—à–∞ "–∫–∞—Å—Ç–æ–º–Ω–∞—è" (—Ç.–µ. –±–µ–∑ –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è) –∫–Ω–æ–ø–∫–∞, —Ç–æ –º—ã –º–æ–∂–µ–º
#             # –≤—ã–ø–æ–ª–Ω–∏—Ç—å edit —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –∏–∑–º–µ–Ω–∏—Ç—å –µ–≥–æ –º–µ–Ω—é. –ù–æ –ø—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º—ã –º–æ–≥–ª–∏ –±—ã
#             # –Ω–∞ —ç—Ç–æ—Ç –∫–ª–∏–∫ –æ—Ç–∫—Ä—ã—Ç—å —Å—Å—ã–ª–∫—É/–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –ø–æ–∫–∞–∑–∞—Ç—å pop-up. (—Å–º.–∞–Ω–∏–º–∞—Ü–∏—é –Ω–∏–∂–µ)
#             elif event.object.payload.get('type') == 'my_own_100500_type_edit':
#                 last_id = vk.messages.edit(
#                     peer_id=event.obj.peer_id,
#                     message='ola',
#                     conversation_message_id=event.obj.conversation_message_id,
#                     keyboard=(keyboard_1 if f_toggle else keyboard_2).get_keyboard())
#                 f_toggle = not f_toggle




@bot.on.message(text='/start')
async def start(ans: Message):
    '''–ù–∞—á–∞–ª–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏'''
    chat_id = ans.from_id
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if storage.get_user(chat_id):
        storage.delete_user_or_userdata(chat_id)  # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await ans('–ü—Ä–∏–≤–µ—Ç\n')
    await ans('–î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –Ω–µ–±–æ–ª—å—à—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—éüòâ\n')
    await ans('–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç–∏—Ç—É—Ç.', keyboard=make_keyboard_institutes(storage.get_institutes()))


@bot.on.message(text=content_types['text'])
async def scheduler(ans: Message):
    chat_id = ans.from_id
    data = ans.text
    user = storage.get_user(chat_id=chat_id)

    if '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ' == data and user:
        await ans('–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥\n', keyboard=make_keyboard_choose_schedule())
        data = listening()

    if ('–ù–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é' == data or '–ù–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é' == data) and user:
        group = storage.get_user(chat_id=chat_id)['group']
        schedule = storage.get_schedule(group=group)
        if not schedule:
            await ans('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ‚è±')
            return

        schedule = schedule['schedule']
        week = find_week()

        # –º–µ–Ω—è–µ–º –Ω–µ–¥–µ–ª—é
        if data == '–ù–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é':
            week = 'odd' if week == 'even' else 'even'

        week_name = '—á–µ—Ç–Ω–∞—è' if week == 'odd' else '–Ω–µ—á–µ—Ç–Ω–∞—è'

        schedule_str = full_schedule_in_str(schedule, week=week)
        await ans(f'–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ {group}\n'
                  f'–ù–µ–¥–µ–ª—è: {week_name}', keyboard=make_keyboard_start_menu())

        for schedule in schedule_str:
            await ans(f'{schedule}')

    elif '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è' == data and user:
        group = storage.get_user(chat_id=chat_id)['group']
        schedule = storage.get_schedule(group=group)
        if not schedule:
            await ans('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æüö´üò£\n'
                      '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ‚è±', keyboard=make_keyboard_start_menu())
            return
        schedule = schedule['schedule']
        week = find_week()
        schedule_one_day = get_one_day_schedule_in_str(schedule=schedule, week=week)
        await ans(f'{schedule_one_day}')

    elif '–ë–ª–∏–∂–∞–π—à–∞—è –ø–∞—Ä–∞' in data and user:
        group = storage.get_user(chat_id=chat_id)['group']
        schedule = storage.get_schedule(group=group)
        if not schedule:
            await ans('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æüö´üò£\n'
                      '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ‚è±')
            return
        schedule = schedule['schedule']
        week = find_week()
        near_lessons = get_near_lesson(schedule=schedule, week=week)

        # –µ—Å–ª–∏ –ø–∞—Ä –Ω–µ—Ç
        if not near_lessons:
            await ans('–°–µ–≥–æ–¥–Ω—è –±–æ–ª—å—à–µ –ø–∞—Ä –Ω–µ—Ç üòé')
            return

        near_lessons_str = ''
        for near_lesson in near_lessons:
            name = near_lesson['name']
            if name == '—Å–≤–æ–±–æ–¥–Ω–æ':
                await ans('–°–µ–≥–æ–¥–Ω—è –±–æ–ª—å—à–µ –ø–∞—Ä –Ω–µ—Ç üòé')
                return
            near_lessons_str += '-------------------------------------------\n'
            aud = near_lesson['aud']
            if aud:
                aud = f'–ê—É–¥–∏—Ç–æ—Ä–∏—è: {aud}\n'
            time = near_lesson['time']
            info = near_lesson['info']
            prep = near_lesson['prep']

            near_lessons_str += f'{time}\n' \
                                f'{aud}' \
                                f'{name}\n' \
                                f'{info} {prep}\n'
        near_lessons_str += '-------------------------------------------\n'
        await ans(f'–ë–ª–∏–∂–∞–π—à–∞—è –ø–∞—Ä–∞\n'f'{near_lessons_str}')


    # elif '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å' in data:
    #     data = json.loads(data)
    #     time = data['save_notifications']
    #
    #     group = storage.get_user(chat_id=chat_id)['group']
    #
    #     schedule = storage.get_schedule(group=group)['schedule']
    #     if time > 0:
    #         reminders = calculating_reminder_times(schedule=schedule, time=int(time))
    #     else:
    #         reminders = []
    #     pprint(reminders)
    #     storage.save_or_update_user(chat_id=chat_id, notifications=time, reminders=reminders)

    # elif '–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é' in data and user:
    #     bot.send_message(chat_id, text='–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=make_keyboard_start_menu())
    #
    # else:
    #     bot.send_message(chat_id, text='–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é üòû')


@bot.on.message()
async def wrapper(ans: Message):
    '''–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'''
    chat_id = ans.from_id
    message = ans.text
    user = storage.get_user(chat_id)
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if not user:
        institutes = name_institutes(storage.get_institutes())
        # –°–º–æ—Ç—Ä–∏–º –≤—ã–±—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–Ω—Å—Ç–∏—Ç—É—Ç
        if message in institutes:
            # –ï—Å–ª–∏ –¥–∞, —Ç–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–¥
            storage.save_or_update_user(chat_id=chat_id, institute=message)
            await ans('–ù–∞–π—Å\n')
            await ans('–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å.', keyboard=make_keyboard_choose_course_vk(storage.get_courses(message)))
        else:
            await ans('–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é\n')
        return
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞
    elif not 'course' in user.keys():
        institute = user['institute']
        course = storage.get_courses(institute)
        # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –∫—É—Ä—Å–∞
        if message in name_courses(course):
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫—É—Ä—Å
            storage.save_or_update_user(chat_id=chat_id, course=message)
            groups = storage.get_groups(institute=institute, course=message)
            groups = name_groups(groups)
            await ans('–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É.', keyboard=make_keyboard_choose_group_vk(groups))
            await ans('–ù–∞–π—Å2\n')
        else:
            await ans('–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é\n')
        return
    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞
    elif not 'group' in user.keys():
        institute = user['institute']
        course = user['course']
        groups = storage.get_groups(institute=institute, course=course)
        groups = name_groups(groups)
        # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –≥—Ä—É–ø–ø—ã
        if message in groups:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É
            storage.save_or_update_user(chat_id=chat_id, group=message)
            await ans('–ö–æ–Ω–≥—Ä–∞—Ç.', keyboard=make_keyboard_start_menu())
        else:
            if message == "–î–∞–ª–µ–µ":
                await ans('–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É.', keyboard=make_keyboard_choose_group_vk_page_2(groups))
            elif message == "–ù–∞–∑–∞–¥":
                await ans('–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É.', keyboard=make_keyboard_choose_group_vk(groups))
            else:
                await ans('–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é\n')
        return

    elif '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ' in message and user:
        await ans('–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –≤ –º–∏–Ω—É—Ç–∞—Ö [–∫—Ä–∞—Ç–Ω–æ–µ 5]')
        time = user['notifications']
        global over
        if time:
            await ans('–£ –≤–∞—Å —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: ' + f'{time}' + ' –º–∏–Ω—É—Ç',
                      keyboard=make_inline_keyboard_notifications())
            over+=1
        elif time==0:
            await ans('–£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ ', keyboard=make_inline_keyboard_notifications())
            over+=1

    elif over and message:
        group = storage.get_user(chat_id=chat_id)['group']
        schedule = storage.get_schedule(group=group)['schedule']
        if message.isdigit():
            if int(message)%5==0:
                time = int(message)
                storage.save_or_update_user(chat_id=chat_id, notifications=time)
                if time > 0:
                    reminders = calculating_reminder_times(schedule=schedule, time=int(time))
                else:
                    reminders = []
                storage.save_or_update_user(chat_id=chat_id, notifications=time, reminders=reminders)
                await ans('–í—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ '+f'{time}'+' –º–∏–Ω—É—Ç', keyboard=make_keyboard_start_menu())
                return
        elif '–ù–∞–∑–∞–¥' in message:
            await ans('–ú–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ ', keyboard=make_keyboard_start_menu())
            over=0
            return
        else:
            await ans('–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é, —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏')
        return


    elif '<==–ù–∞–∑–∞–¥' in message and user:
        await ans('–ú–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ ', keyboard=make_keyboard_start_menu())
        over=0
        return





def main():
    '''–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞'''
    bot.run_polling()


if __name__ == "__main__":
    main()
