from functions.creating_schedule import full_schedule_in_str, full_schedule_in_str_prep, get_one_day_schedule_in_str, \
    get_next_day_schedule_in_str, get_one_day_schedule_in_str_prep, get_next_day_schedule_in_str_prep
from functions.calculating_reminder_times import calculating_reminder_times
from functions.near_lesson import get_near_lesson, get_now_lesson
from functions.storage import MongodbService
from vkbottle_types import BaseStateGroup
from functions.logger import logger
from vkbottle import Keyboard, KeyboardButtonColor, Text
from functions.find_week import find_week
from vk_api import vk_api, VkUpload
import requests
import json
import os
import pytz
from datetime import datetime
from vkbottle.bot import Bot, Message

TOKEN = os.environ.get('VK')

# –û–±—å—è–≤–ª–µ–Ω–∏–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –≥–ª–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö

MAX_CALLBACK_RANGE = 41
storage = MongodbService().get_instance()
bot = Bot(TOKEN)  # TOKEN

content_types = {
    'text': ['–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ üóì', '–ë–ª–∏–∂–∞–π—à–∞—è –ø–∞—Ä–∞ ‚è±', '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è üçè', '–ù–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é',
             '–ù–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é',
             '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ üçé', '–°–ª–µ–¥—É—é—â–∞—è', '–¢–µ–∫—É—â–∞—è']}

—Åontent_commands = {'text': ['–ù–∞—á–∞—Ç—å', '–Ω–∞—á–∞—Ç—å', '–ù–∞—á–∞–ª–æ', 'start']}

content_map = {'text': ['map', '–ö–∞—Ä—Ç–∞', '–∫–∞—Ä—Ç–∞', 'Map', '–°—Ö–µ–º–∞', '—Å—Ö–µ–º–∞']}

TZ_IRKUTSK = pytz.timezone('Asia/Irkutsk')

authorize = vk_api.VkApi(token=TOKEN)
upload = VkUpload(authorize)
map_image = "map.jpg"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
Condition_request = {}
prep_reg = {}


def parametres_for_buttons_start_menu_vk(text, color):
    '''–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–Ω–æ–ø–æ–∫'''
    return {
        "action": {
            "type": "text",
            "payload": "{\"button\": \"" + "1" + "\"}",
            "label": f"{text}"
        },
        "color": f"{color}"
    }


def get_notifications_status(time):
    """–°—Ç–∞—Ç—É—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    if not time or time == 0:
        notifications_status = '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã ‚ùå\n' \
                               '–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å'
    else:
        notifications_status = f'–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã ‚úÖ\n' \
                               f'–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–¥—ë—Ç –∑–∞ {time} –º–∏–Ω –¥–æ –Ω–∞—á–∞–ª–∞ –ø–∞—Ä—ã üòá'
    return notifications_status


# ==================== –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä –∏ –∫–Ω–æ–ø–æ–∫ ==================== #

def make_inline_keyboard_notifications():
    """ –ö–Ω–æ–ø–∫–∞ '–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π' """
    keyboard = Keyboard(one_time=False)
    keyboard.row()
    keyboard.add(Text(label='–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öô'), color=KeyboardButtonColor.PRIMARY)
    keyboard.row()
    keyboard.add(Text(label='<==–ù–∞–∑–∞–¥'), color=KeyboardButtonColor.SECONDARY)
    return keyboard


def make_keyboard_start_menu():
    """ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é """
    keyboard = Keyboard(one_time=False)
    keyboard.row()
    keyboard.add(Text(label="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ üóì"), color=KeyboardButtonColor.PRIMARY)
    keyboard.add(Text(label="–ë–ª–∏–∂–∞–π—à–∞—è –ø–∞—Ä–∞ ‚è±"), color=KeyboardButtonColor.PRIMARY)
    keyboard.row()
    keyboard.add(Text(label="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è üçè"), color=KeyboardButtonColor.SECONDARY)
    keyboard.row()
    keyboard.add(Text(label="–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ üçé"), color=KeyboardButtonColor.SECONDARY)
    keyboard.row()
    keyboard.add(Text(label="–ü–æ–∏—Å–∫ üîé"), color=KeyboardButtonColor.PRIMARY)
    keyboard.add(Text(label="–î—Ä—É–≥–æ–µ ‚ö°"), color=KeyboardButtonColor.PRIMARY)
    return keyboard


def make_keyboard_commands():
    """ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥"""
    keyboard = Keyboard(one_time=False)
    keyboard.row()
    # keyboard.add(Text(label="about"), color=KeyboardButtonColor.PRIMARY)
    keyboard.add(Text(label="–ê–≤—Ç–æ—Ä—ã"), color=KeyboardButtonColor.PRIMARY)
    keyboard.row()
    keyboard.add(Text(label="–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"), color=KeyboardButtonColor.SECONDARY)
    keyboard.add(Text(label="–ö–∞—Ä—Ç–∞"), color=KeyboardButtonColor.SECONDARY)
    keyboard.row()
    keyboard.add(Text(label="<==–ù–∞–∑–∞–¥"), color=KeyboardButtonColor.SECONDARY)
    return keyboard


def make_keyboard_extra():
    """ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é - –î—Ä—É–≥–æ–µ"""
    keyboard = Keyboard(one_time=False)
    keyboard.row()
    keyboard.add(Text(label="–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"), color=KeyboardButtonColor.PRIMARY)
    keyboard.row()
    keyboard.add(Text(label="–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ üì£"), color=KeyboardButtonColor.SECONDARY)
    keyboard.row()
    keyboard.add(Text(label="<==–ù–∞–∑–∞–¥"), color=KeyboardButtonColor.SECONDARY)
    return keyboard


def make_keyboard_nearlesson():
    """ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –Ω–µ–¥–µ–ª–∏ """
    keyboard = Keyboard(one_time=False)
    keyboard.row()
    keyboard.add(Text(label="–¢–µ–∫—É—â–∞—è"), color=KeyboardButtonColor.PRIMARY)
    keyboard.add(Text(label="–°–ª–µ–¥—É—é—â–∞—è"), color=KeyboardButtonColor.PRIMARY)
    keyboard.row()
    keyboard.add(Text(label="<==–ù–∞–∑–∞–¥"), color=KeyboardButtonColor.SECONDARY)
    return keyboard


def make_inline_keyboard_set_notifications(time=0):
    """ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π """

    if time != 0:
        text_check = f'{time} –º–∏–Ω'
    else:
        text_check = 'off'

    keyboard = Keyboard(one_time=False)
    keyboard.row()
    keyboard.add(Text(label="-"), color=KeyboardButtonColor.PRIMARY)
    keyboard.add(Text(label=text_check), color=KeyboardButtonColor.PRIMARY)
    keyboard.add(Text(label='+'), color=KeyboardButtonColor.PRIMARY)
    keyboard.row()
    keyboard.add(Text(label="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å"), color=KeyboardButtonColor.SECONDARY)
    return keyboard


def make_keyboard_institutes(institutes=[]):
    """ –ö–ª–∞–≤–∏—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞ """

    keyboard = {
        "one_time": False
    }
    list_keyboard = []
    list_keyboard_main = []
    list_keyboard.append(parametres_for_buttons_start_menu_vk('–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å', 'primary'))
    list_keyboard_main.append(list_keyboard)
    for institute in institutes:
        if len(institute['name']) >= MAX_CALLBACK_RANGE:
            name = sep_space(institute['name']) + ' ...'
        else:
            name = institute['name']
        list_keyboard = []
        list_keyboard.append(parametres_for_buttons_start_menu_vk(f'{name}', 'primary'))
        list_keyboard_main.append(list_keyboard)
    keyboard['buttons'] = list_keyboard_main
    keyboard = json.dumps(keyboard, ensure_ascii=False).encode('utf-8')
    keyboard = str(keyboard.decode('utf-8'))
    return keyboard


def make_keyboard_choose_course_vk(courses):
    """ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞ """

    keyboard = {
        "one_time": False
    }
    list_keyboard_main = []
    for course in courses:
        name = course['name']
        list_keyboard = []
        list_keyboard.append(parametres_for_buttons_start_menu_vk(f'{name}', 'primary'))
        list_keyboard_main.append(list_keyboard)
    list_keyboard = []
    list_keyboard.append(parametres_for_buttons_start_menu_vk('–ù–∞–∑–∞–¥ –∫ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞–º', 'primary'))
    list_keyboard_main.append(list_keyboard)
    keyboard['buttons'] = list_keyboard_main
    keyboard = json.dumps(keyboard, ensure_ascii=False).encode('utf-8')
    keyboard = str(keyboard.decode('utf-8'))
    return keyboard


def make_keyboard_choose_group_vk(groups=[]):
    """ –ö–ª–∞–≤–∏—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã """

    keyboard = {
        "one_time": False
    }
    list_keyboard_main_2 = []
    list_keyboard_main = []
    list_keyboard = []
    overflow = 0
    for group in groups:
        overflow += 1
        if overflow == 27:
            list_keyboard_main.append(list_keyboard)
            list_keyboard = []
            list_keyboard.append(parametres_for_buttons_start_menu_vk('–î–∞–ª–µ–µ', 'primary'))
            list_keyboard.append(parametres_for_buttons_start_menu_vk('–ù–∞–∑–∞–¥ –∫ –∫—É—Ä—Å–∞–º', 'primary'))
            list_keyboard_main.append(list_keyboard)
        else:
            if overflow < 28:
                if len(list_keyboard) == 3:
                    list_keyboard_main.append(list_keyboard)
                    list_keyboard = []
                    list_keyboard.append(parametres_for_buttons_start_menu_vk(f'{group}', 'primary'))
                else:
                    list_keyboard.append(parametres_for_buttons_start_menu_vk(f'{group}', 'primary'))

            else:
                list_keyboard = []
                list_keyboard.append(parametres_for_buttons_start_menu_vk(f'{group}', 'primary'))
                list_keyboard_main_2.append(parametres_for_buttons_start_menu_vk(f'{group}', 'primary'))

    if overflow < 28:
        list_keyboard_main.append(list_keyboard)
        list_keyboard = []
        list_keyboard.append(parametres_for_buttons_start_menu_vk('–ù–∞–∑–∞–¥ –∫ –∫—É—Ä—Å–∞–º', 'primary'))
        list_keyboard_main.append(list_keyboard)
    else:
        list_keyboard_main_2.append(list_keyboard)

    keyboard['buttons'] = list_keyboard_main
    keyboard = json.dumps(keyboard, ensure_ascii=False).encode('utf-8')
    keyboard = str(keyboard.decode('utf-8'))

    return keyboard


def make_keyboard_choose_group_vk_page_2(groups=[]):
    """ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≥—Ä—É–ø–ø –ø–æ—Å–ª–µ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏—è –ø–µ—Ä–≤–æ–π """

    keyboard = {
        "one_time": False
    }
    groups = groups[26:]
    list_keyboard_main = []
    list_keyboard = []
    for group in groups:
        if len(list_keyboard) == 3:
            list_keyboard_main.append(list_keyboard)
            list_keyboard = []
            list_keyboard.append(parametres_for_buttons_start_menu_vk(f'{group}', 'primary'))
        else:
            list_keyboard.append(parametres_for_buttons_start_menu_vk(f'{group}', 'primary'))
    list_keyboard_main.append(list_keyboard)
    list_keyboard_main.append([parametres_for_buttons_start_menu_vk('–ù–∞–∑–∞–¥', 'primary')])

    keyboard['buttons'] = list_keyboard_main
    keyboard = json.dumps(keyboard, ensure_ascii=False).encode('utf-8')
    keyboard = str(keyboard.decode('utf-8'))
    return keyboard


def make_keyboard_choose_schedule():
    """ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –Ω–µ–¥–µ–ª–∏ """

    keyboard = Keyboard(one_time=False)
    keyboard.row()
    keyboard.add(Text(label="–ù–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é"), color=KeyboardButtonColor.PRIMARY)
    keyboard.add(Text(label="–ù–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é"), color=KeyboardButtonColor.PRIMARY)
    keyboard.row()
    keyboard.add(Text(label="–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é"), color=KeyboardButtonColor.SECONDARY)
    return keyboard


def make_keyboard_search_group(page, search_result=[]):
    """ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –≥—Ä—É–ø–ø–µ """

    keyboard = {
        "one_time": False
    }

    list_keyboard_main_2 = []
    list_keyboard_main = []
    list_keyboard = []
    overflow = 0
    for group in search_result:
        group = group['search']
        overflow += 1
        if overflow == 25:
            list_keyboard_main.append(list_keyboard)
            list_keyboard = []
            if page == 1:
                list_keyboard.append(parametres_for_buttons_start_menu_vk('–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é', 'primary'))
                list_keyboard.append(parametres_for_buttons_start_menu_vk('–î–∞–ª—å—à–µ', 'positive'))
                list_keyboard_main.append(list_keyboard)
            elif page > 1:
                list_keyboard.append(parametres_for_buttons_start_menu_vk('<==–ù–∞–∑–∞–¥', 'negative'))
                list_keyboard.append(parametres_for_buttons_start_menu_vk('–î–∞–ª—å—à–µ', 'positive'))
                list_keyboard_main.append(list_keyboard)
                list_keyboard_main.append([parametres_for_buttons_start_menu_vk('–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é', 'primary')])

        else:
            if overflow < 26:
                if len(list_keyboard) == 3:
                    list_keyboard_main.append(list_keyboard)
                    list_keyboard = []
                    list_keyboard.append(parametres_for_buttons_start_menu_vk(f'{group}', 'primary'))
                else:
                    list_keyboard.append(parametres_for_buttons_start_menu_vk(f'{group}', 'primary'))

            else:
                list_keyboard = []
                list_keyboard.append(parametres_for_buttons_start_menu_vk(f'{group}', 'primary'))
                list_keyboard_main_2.append(parametres_for_buttons_start_menu_vk(f'{group}', 'primary'))

    if overflow < 26 and page > 1:
        list_keyboard_main.append(list_keyboard)
        list_keyboard = []
        list_keyboard.append(parametres_for_buttons_start_menu_vk('<==–ù–∞–∑–∞–¥', 'negative'))
        list_keyboard.append(parametres_for_buttons_start_menu_vk('–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é', 'primary'))
        list_keyboard_main.append(list_keyboard)

    elif overflow < 26:
        list_keyboard_main.append(list_keyboard)
        list_keyboard = []
        list_keyboard.append(parametres_for_buttons_start_menu_vk('–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é', 'primary'))
        list_keyboard_main.append(list_keyboard)
    else:
        list_keyboard_main_2.append(list_keyboard)

    keyboard['buttons'] = list_keyboard_main
    keyboard = json.dumps(keyboard, ensure_ascii=False).encode('utf-8')
    keyboard = str(keyboard.decode('utf-8'))

    return keyboard


def make_keyboard_main_menu():
    """ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã—Ö–æ–¥–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é """

    keyboard = Keyboard(one_time=False)
    keyboard.row()
    keyboard.add(Text(label="–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é"), color=KeyboardButtonColor.PRIMARY)
    return keyboard


def back_for_prep():
    """ –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å—Ç–∞—Ä—Ç—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π """

    keyboard = Keyboard(one_time=False)
    keyboard.row()
    keyboard.add(Text(label="–ù–∞–∑–∞–¥ –∫ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞–º"), color=KeyboardButtonColor.PRIMARY)
    return keyboard


def sep_space(name):
    """ –û–±—Ä–µ–∑–∞–µ—Ç –¥–ª–∏–Ω—É –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞, –µ—Å–ª–∏ —Ç–æ—Ç –±–æ–ª—å—à–µ 40 —Å–∏–º–≤–æ–ª–æ–≤ """

    dlina = abs(len(name) - MAX_CALLBACK_RANGE)
    name = name[:len(name) - dlina - 5]
    return name


def name_institutes(institutes=[]):
    """ –•—Ä–∞–Ω–∏–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–Ω—Å—Ç–∏—Ç—É—Ç–æ–≤ """

    list_institutes = []
    for i in institutes:
        name = i['name']
        list_institutes.append(name)
    return list_institutes


def name_courses(courses=[]):
    """ –•—Ä–∞–Ω–∏–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤ """

    list_courses = []
    for i in courses:
        name = i['name']
        list_courses.append(name)
    return list_courses


def name_groups(groups=[]):
    """ –•—Ä–∞–Ω–∏–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥—Ä—É–ø–ø """

    list_groups = []
    for i in groups:
        name = i['name']
        list_groups.append(name)
    return list_groups


def add_statistics(action: str):
    """ –°—Ö–æ—Ä–∞–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏   """

    date_now = datetime.now(TZ_IRKUTSK).strftime('%d.%m.%Y')
    time_now = datetime.now(TZ_IRKUTSK).strftime('%H:%M')
    storage.save_statistics(action=action, date=date_now, time=time_now)


# ==================== –ü–û–ò–°–ö ==================== #

class SuperStates(BaseStateGroup):
    SEARCH = 0
    PREP_REG = 1


@bot.on.message(state=SuperStates.SEARCH)  # –°—Ç–µ–π—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã –ø–æ–∏—Å–∫–∞
async def search(ans: Message):
    '''–°—Ç–µ–π—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã –ø–æ–∏—Å–∫–∞'''
    # –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è(—Å–ª–æ–≤–∞—Ä—å), –∫–æ—Ç–æ—Ä–∞—è —Ö—Ä–∞–Ω–∏—Ç –≤ —Å–µ–±–µ 3 —Å–æ—Å—Ç–æ—è–Ω–∏—è (–Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã; —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥–∏–º; —Å–ø–∏—Å–æ–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è –≤—ã—Ö–æ–¥–∞ –ø–æ —É—Å–ª–æ–≤–∏—é –≤ —Å—Ç–µ–π—Ç–µ)
    global Condition_request
    # –ß–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    chat_id = ans.from_id
    # –î–∞–Ω–Ω—ã–µ –≤–≤–æ–¥–∞
    data = ans.text
    # –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ –≥—Ä—É–ø–ø–∞–º
    all_found_groups = []
    # –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è –ø—Ä–µ–ø–æ–¥–æ–≤
    all_found_prep = []
    # –ó–∞–¥–∞—ë–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    page = 1
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ —Ä–∏–ª-—Ç–∞–π–º
    logger.info(f'Inline button data: {data}')
    # –£—Å–ª–æ–≤–∏–µ –¥–ª—è –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ –≤—Ö–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (storage.get_search_list(ans.text) or storage.get_search_list_prep(ans.text)) and Condition_request[
        chat_id] == []:
        # –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –ø–æ –≥—Ä—É–ø–ø–∞–º
        request_group = storage.get_search_list(ans.text)
        # –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –ø–æ –ø—Ä–µ–ø–æ–¥–∞–º
        request_prep = storage.get_search_list_prep(ans.text)
        # –¶–∏–∫–ª—ã –Ω—É–∂–Ω—ã –¥–ª—è –æ–±—â–µ–≥–æ –ø–æ–∏—Å–∫–∞. –ó–¥–µ—Å—å –º—ã —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–ª—é—á–∏ –≤ –æ–±–æ–∏—Ö —Ä–µ–∫–≤–µ—Å—Ç–∞—Ö –∏ —Å–æ–∑–¥–∞—ë–º –æ–¥–∏–Ω –æ–±—â–∏–π –∫–ª—é—á, –∫–∞–∫ –¥–ª—è –≥—Ä—É–ø–ø, —Ç–∞–∫ –∏ –¥–ª—è –ø—Ä–µ–ø–æ–¥–æ–≤
        for i in request_group:
            i['search'] = i.pop('name')
        for i in request_prep:
            i['search'] = i.pop('prep_short_name')
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –∏—â–µ–º
        request_word = ans.text
        # –°–∫–ª–µ–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–≤—É—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è –æ–±—â–µ–≥–æ –ø–æ–∏—Å–∫–∞
        request = request_group + request_prep
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ñ—É–Ω–∫—Ü–∏—é –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        keyboard = make_keyboard_search_group(page, request)
        # –≠—Ç–∏ —Ü–∏–∫–ª—ã –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç –≥—Ä—É–ø–ø—ã –∏ –ø—Ä–µ–ø–æ–¥–æ–≤ –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ –¥–ª—è —É–¥–æ–±–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –Ω–∏–º–∏
        for i in request_group:
            all_found_groups.append(i['search'].lower())
        for i in request_prep:
            all_found_prep.append(i['search'].lower())
        # –°–æ–∑–¥–∞—ë–º –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫
        all_found_results = all_found_groups + all_found_prep
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –±–∞–≥–∞–∂ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        list_search = [page, request_word, all_found_results]
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–¥ –∫–ª—é—á–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        Condition_request[chat_id] = list_search
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π (–∫–ª–∏–≤–∏–∞—Ç—É—Ä —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç—Å—è –ø–æ –ø–æ–∏—Å–∫–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É)
        await ans.answer("–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞", keyboard=keyboard)

    # –ó–¥–µ—Å—å —É–ª–æ–≤–∏—è –¥–ª—è –≤—ã—Ö–æ–¥–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
    elif ans.text == "–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é":
        del Condition_request[ans.from_id]
        await ans.answer("–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é", keyboard=make_keyboard_start_menu())
        await bot.state_dispenser.delete(ans.peer_id)

    # –ó–¥–µ—Å—å —É–ª–æ–≤–∏–µ –¥–ª—è —Å–ª–æ–≤–∞ "–î–∞–ª—å—à–µ"
    elif ans.text == "–î–∞–ª—å—à–µ":
        page = Condition_request[ans.from_id][0]
        Condition_request[ans.from_id][0] += 1
        request_word = Condition_request[ans.from_id][1]
        request_group = storage.get_search_list(request_word)
        request_prep = storage.get_search_list_prep(request_word)
        for i in request_group:
            i['search'] = i.pop('name')
        for i in request_prep:
            i['search'] = i.pop('prep_short_name')
        request = request_group + request_prep
        request = request[26 * page:]
        keyboard = make_keyboard_search_group(page + 1, request)
        await ans.answer(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}", keyboard=keyboard)

    # –ü–æ –∞–Ω–∞–ª–æ–≥–∏–∏ —Å–æ —Å–ª–æ–≤–æ–º "<==–ù–∞–∑–∞–¥", —Ç–æ–ª—å–∫–æ –æ–±—Ä–∞—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å
    elif ans.text == "<==–ù–∞–∑–∞–¥":
        Condition_request[ans.from_id][0] -= 1
        page = Condition_request[ans.from_id][0]
        request_word = Condition_request[ans.from_id][1]
        request_group = storage.get_search_list(request_word)
        request_prep = storage.get_search_list_prep(request_word)
        for i in request_group:
            i['search'] = i.pop('name')
        for i in request_prep:
            i['search'] = i.pop('prep_short_name')
        request = request_group + request_prep
        request = request[26 * (page - 1):]
        keyboard = make_keyboard_search_group(page, request)
        await ans.answer(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}", keyboard=keyboard)

    # –£—Å–ª–æ–≤–∏–µ –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –ø–æ –Ω–µ–¥–µ–ª—è–º
    elif ('–ù–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é' == data or '–ù–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é' == data):
        group = Condition_request[ans.from_id][1]
        request_word = Condition_request[ans.from_id][1]
        request_group = storage.get_search_list(request_word)
        request_prep = storage.get_search_list_prep(request_word)
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø—Ä–æ—Å –¥–ª—è –≥—Ä—É–ø–ø—ã, —Ç–æ —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã, –∞ –µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞
        if request_group:
            schedule = storage.get_schedule(group=group)
        elif request_prep:
            schedule = request_prep[0]
        if schedule['schedule'] == []:
            await ans.answer('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ‚è±')
            add_statistics(action=data)
            return

        schedule = schedule['schedule']
        week = find_week()

        # –º–µ–Ω—è–µ–º –Ω–µ–¥–µ–ª—é
        if data == '–ù–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é':
            week = 'odd' if week == 'even' else 'even'

        week_name = '—á–µ—Ç–Ω–∞—è' if week == 'odd' else '–Ω–µ—á–µ—Ç–Ω–∞—è'
        if request_group:
            schedule_str = full_schedule_in_str(schedule, week=week)
        elif request_prep:
            schedule_str = full_schedule_in_str_prep(schedule, week=week)

        await ans.answer(f'–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ {group}\n'
                         f'–ù–µ–¥–µ–ª—è: {week_name}', keyboard=make_keyboard_start_menu())

        for schedule in schedule_str:
            await ans.answer(f'{schedule}')
        await bot.state_dispenser.delete(ans.peer_id)

    # –£—Å–ª–æ–≤–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞, —Ç–æ–±–∏—à—å –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    elif (storage.get_search_list(ans.text) or storage.get_search_list_prep(ans.text)) and ans.text.lower() in (i for i
                                                                                                                in
                                                                                                                Condition_request[
                                                                                                                    ans.from_id][
                                                                                                                    2]):
        choose = ans.text
        Condition_request[ans.from_id][1] = choose
        request_word = Condition_request[ans.from_id][1]
        request_group = storage.get_search_list(request_word)
        request_prep = storage.get_search_list_prep(request_word)
        for i in request_group:
            i['search'] = i.pop('name')
        for i in request_prep:
            i['search'] = i.pop('prep_short_name')
        if request_group:
            await ans.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é –¥–ª—è –≥—Ä—É–ø–ø—ã {choose}", keyboard=make_keyboard_choose_schedule())
        elif request_prep:
            await ans.answer(f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–¥–µ–ª—é –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è {request_prep[0]['prep']}",
                             keyboard=make_keyboard_choose_schedule())
        else:
            return
    # –û–±—â–µ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å–ª—É—á–∞–µ–º, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É —Å–ª–æ–º–∞—Ç—å –±–æ—Ç–∞. (–ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏ –∫–æ–ø–∏—è –ø–µ—Ä–≤–æ–≥–æ IF)
    else:
        if Condition_request[ans.from_id] and storage.get_search_list(ans.text) or storage.get_search_list_prep(
                ans.text):
            request_group = storage.get_search_list(ans.text)
            request_prep = storage.get_search_list_prep(ans.text)
            for i in request_group:
                i['search'] = i.pop('name')
            for i in request_prep:
                i['search'] = i.pop('prep_short_name')
            request_word = ans.text
            request = request_group + request_prep
            keyboard = make_keyboard_search_group(page, request)
            for i in request_group:
                all_found_groups.append(i['search'].lower())
            for i in request_prep:
                all_found_prep.append(i['search'].lower())
            all_found_results = all_found_groups + all_found_prep
            list_search = [page, request_word, all_found_results]
            Condition_request[chat_id] = list_search
            await ans.answer("–†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞", keyboard=keyboard)

        else:
            if len(Condition_request[chat_id]) == 3:
                Condition_request[chat_id][1] = ''
                await ans.answer('–ü–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ üòï')
                return
            else:
                await ans.answer('–ü–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ üòï')
                return

@bot.on.message(text="–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å") # –í—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ —Å—Ç–µ–π—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
async def prep_reg(ans: Message):
    """–í—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ —Å—Ç–µ–π—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π"""
    global prep_reg

    chat_id = ans.from_id
    message_inst = ans.text
    prep_reg[chat_id] = []
    storage.save_or_update_user(chat_id=chat_id, institute=message_inst, course='None')
    await ans.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏: {message_inst}\n')
    await ans.answer('üìö–ö—Ç–æ –ø–æ—Å—Ç–∏–≥–∞–µ—Ç –Ω–æ–≤–æ–µ, –ª–µ–ª–µ—è —Å—Ç–∞—Ä–æ–µ,\n'
                     '–¢–æ—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å —É—á–∏—Ç–µ–ª–µ–º.\n'
                     '–ö–æ–Ω—Ñ—É—Ü–∏–π')

    await ans.answer('–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é.\n'
                     '–ù–∞–ø—Ä–∏–º–µ—Ä: –ö–æ—Ä–Ω—è–∫–æ–≤ –ú–∏—Ö–∞–∏–ª –í–∏–∫—Ç–æ—Ä–æ–≤–∏—á', keyboard=back_for_prep())
    await bot.state_dispenser.set(ans.peer_id, SuperStates.PREP_REG)

@bot.on.message(state=SuperStates.PREP_REG)  #
async def start_reg_prep(ans: Message):
    """–°—Ç–µ–π—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π"""
    global prep_reg
    chat_id = ans.from_id
    message = ans.text
    page = 1
    prep_list = storage.get_prep(message)
    if prep_list:
        prep_name = prep_list[0]['prep']
        storage.save_or_update_user(chat_id=chat_id, group=prep_name, course='None')
        await bot.state_dispenser.delete(ans.peer_id)
        await ans.answer(f'–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å, –∫–∞–∫ {prep_name}!üòä\n\n'
                         '–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–≤—Ç–æ—Ä–Ω–æ, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"\n',
                         keyboard=make_keyboard_start_menu())
        return

    # –ï—Å–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞—à–ª–∏
    elif not prep_list and not prep_reg[chat_id]:
        # –î–µ–ª–∏–º –≤–≤–µ–¥–µ–Ω–Ω–æ–µ —Ñ–∏–æ –Ω–∞ —á–∞—Å—Ç–∏ –∏ –∏—â–µ–º –ø–æ –∫–∞–∂–¥–æ–π –≤ –±–∞–∑–µ
        prep_list = []
        prep_list_2 = []
        for name_unit in message.split():
            for i in storage.get_register_list_prep(name_unit):
                prep_list.append(i['prep'])
            if prep_list and prep_list_2:
                prep_list_2 = list(set(prep_list) & set(prep_list_2))
            elif prep_list and not (prep_list_2):
                prep_list_2 = prep_list
            prep_list = []
        print(prep_list_2)
        if not prep_list_2:
            prep_list_2 = None
        prep_list_reg = [page, prep_list_2]
        prep_reg[chat_id] = prep_list_reg
        if prep_reg[chat_id][1]:
            prep_list_2 = prep_reg[chat_id][1]
            keyboard = Keyboard(one_time=False)
            for i in prep_list_2[:8]:
                keyboard.row()
                keyboard.add(Text(label=i), color=KeyboardButtonColor.PRIMARY)
            keyboard.row()
            keyboard.add(Text(label='–ù–∞–∑–∞–¥ –∫ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞–º'), color=KeyboardButtonColor.PRIMARY)
            if len(prep_list_2) > 8:
                keyboard.add(Text(label='–î–∞–ª–µ–µ'), color=KeyboardButtonColor.PRIMARY)
            await ans.answer('–í–æ–∑–º–æ–∂–Ω–æ –í—ã –∏–º–µ–ª–∏ –≤ –≤–∏–¥—É', keyboard=keyboard)
            return
        else:
            storage.delete_user_or_userdata(chat_id)
            await ans.answer('–ú—ã –Ω–µ —Å–º–æ–≥–ª–∏ –Ω–∞–π—Ç–∏ –≤–∞—Å –≤ –±–∞–∑–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π.\n'
                             '–í–æ–∑–º–æ–∂–Ω–æ –≤—ã –Ω–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–ª–∏ —Å–≤–æ—ë –§–ò–û.',
                             keyboard=make_keyboard_institutes(storage.get_institutes()))
            await bot.state_dispenser.delete(ans.peer_id)
    if message == "–ù–∞–∑–∞–¥ –∫ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞–º":
        await ans.answer('–ù–∞–∑–∞–¥ –∫ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞–º', keyboard=make_keyboard_institutes(storage.get_institutes()))
        storage.delete_user_or_userdata(chat_id)
        await bot.state_dispenser.delete(ans.peer_id)

    if message == '–î–∞–ª–µ–µ':
        prep_reg[chat_id][0] += 1
        page = prep_reg[chat_id][0]
        prep_list_2 = prep_reg[chat_id][1]
        keyboard = Keyboard(one_time=False)
        if len(prep_list_2) - (page - 1) * 8 >= 8:
            for i in prep_list_2[(page - 1) * 8:(page - 1) * 8 + 8]:
                keyboard.row()
                keyboard.add(Text(label=i['prep']), color=KeyboardButtonColor.PRIMARY)
            keyboard.row()
            keyboard.add(Text(label='–ù–∞–∑–∞–¥'), color=KeyboardButtonColor.PRIMARY)
            keyboard.add(Text(label='–î–∞–ª–µ–µ'), color=KeyboardButtonColor.PRIMARY)
            keyboard.row()
            keyboard.add(Text(label='–ù–∞–∑–∞–¥ –∫ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞–º'), color=KeyboardButtonColor.PRIMARY)
        else:
            for i in prep_list_2[(page - 1) * 8: len(prep_list_2)]:
                keyboard.row()
                keyboard.add(Text(label=i), color=KeyboardButtonColor.PRIMARY)
            keyboard.row()
            keyboard.add(Text(label='–ù–∞–∑–∞–¥'), color=KeyboardButtonColor.PRIMARY)
            keyboard.add(Text(label='–ù–∞–∑–∞–¥ –∫ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞–º'), color=KeyboardButtonColor.PRIMARY)
        await ans.answer(f'–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}', keyboard=keyboard)

    if message == '–ù–∞–∑–∞–¥':
        prep_reg[chat_id][0] -= 1
        page = prep_reg[chat_id][0]
        prep_list_2 = prep_reg[chat_id][1]
        keyboard = Keyboard(one_time=False)
        for i in prep_list_2[(page - 1) * 8:page * 8]:
            keyboard.row()
            keyboard.add(Text(label=i), color=KeyboardButtonColor.PRIMARY)
        keyboard.row()
        if page != 1:
            keyboard.add(Text(label='–ù–∞–∑–∞–¥'), color=KeyboardButtonColor.PRIMARY)
            keyboard.add(Text(label='–î–∞–ª–µ–µ'), color=KeyboardButtonColor.PRIMARY)
            keyboard.row()
            keyboard.add(Text(label='–ù–∞–∑–∞–¥ –∫ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞–º'), color=KeyboardButtonColor.PRIMARY)
        elif page == 1:
            keyboard.add(Text(label='–ù–∞–∑–∞–¥ –∫ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞–º'), color=KeyboardButtonColor.PRIMARY)
            keyboard.add(Text(label='–î–∞–ª–µ–µ'), color=KeyboardButtonColor.PRIMARY)
        await ans.answer(f'–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}', keyboard=keyboard)

    return


# ==================== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ ==================== #
# –í—Ö–æ–¥–∏–º –≤ —Å—Ç–µ–π—Ç –ø–æ –∫–æ–¥–æ–≤–æ–º—É —Å–ª–æ–≤—É "–ü–æ–∏—Å–∫"
@bot.on.message(text="–ü–æ–∏—Å–∫ üîé") #–í—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ —Å—Ç–µ–π—Ç –ø–æ–∏—Å–∫–∞
async def die_handler(ans: Message):
    """–í—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ —Å—Ç–µ–π—Ç –ø–æ–∏—Å–∫–∞"""
    # –≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è(—Å–ª–æ–≤–∞—Ä—å), –∫–æ—Ç–æ—Ä–∞—è —Ö—Ä–∞–Ω–∏—Ç –≤ —Å–µ–±–µ 3 —Å–æ—Å—Ç–æ—è–Ω–∏—è (–Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã; —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥–∏–º; —Å–ø–∏—Å–æ–∫ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è –≤—ã—Ö–æ–¥–∞ –ø–æ —É—Å–ª–æ–≤–∏—é –≤ —Å—Ç–µ–π—Ç–µ)
    global Condition_request
    # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    chat_id = ans.from_id
    # –°–æ–∑–¥–∞—ë–º –∫–ª—é—á –ø–æ –∑–Ω–∞—á–µ–Ω–∏—é ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    Condition_request[chat_id] = []
    # –ó–∞—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏–∑ –±–∞–∑—ã
    user = storage.get_user(chat_id=chat_id)
    # –£—Å–ª–æ–≤–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ
    if user:
        # –ó–∞–ø—É—Å–∫ —Å—Ç–µ–π—Ç–∞ —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º SEARCH
        await bot.state_dispenser.set(ans.peer_id, SuperStates.SEARCH)
        await ans.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—é –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è\n'
                         '–ù–∞–ø—Ä–∏–º–µ—Ä: –ò–ë–±-18-1 –∏–ª–∏ –ò–≤–∞–Ω–æ–≤', keyboard=make_keyboard_main_menu())
    else:
        await ans.answer('–ü—Ä–∏–≤–µ—Ç\n')
        await ans.answer('–î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –Ω–µ–±–æ–ª—å—à—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—éüòâ\n')
        await ans.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç–∏—Ç—É—Ç.', keyboard=make_keyboard_institutes(storage.get_institutes()))


# –ö–æ–º–∞–Ω–¥–∞ start
@bot.on.message(text=—Åontent_commands['text'])
async def start_message(ans: Message):
    chat_id = ans.from_id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if storage.get_user(chat_id):
        storage.delete_user_or_userdata(chat_id)  # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await ans.answer('–ü—Ä–∏–≤–µ—Ç\n')
    await ans.answer('–î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –Ω–µ–±–æ–ª—å—à—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—éüòâ\n')
    await ans.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç–∏—Ç—É—Ç.', keyboard=make_keyboard_institutes(storage.get_institutes()))

    add_statistics(action='start')


# –ö–æ–º–∞–Ω–¥–∞ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
@bot.on.message(text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')
async def registration(ans: Message):
    chat_id = ans.from_id
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if storage.get_user(chat_id):
        storage.delete_user_or_userdata(chat_id)  # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await ans.answer('–ü–æ–≤—Ç–æ—Ä–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—èüòâ\n')
    await ans.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç–∏—Ç—É—Ç.', keyboard=make_keyboard_institutes(storage.get_institutes()))

    add_statistics(action='reg')


# –ö–æ–º–∞–Ω–¥–∞ –ö–∞—Ä—Ç–∞
@bot.on.message(text=content_map['text'])
async def map(ans: Message):
    chat_id = ans.from_id
    await ans.answer('–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∫–∞—Ä—Ç–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...', keyboard=make_keyboard_start_menu())
    server = authorize.method("photos.getMessagesUploadServer")
    b = requests.post(server['upload_url'], files={'photo': open('map.jpg', 'rb')}).json()
    c = authorize.method('photos.saveMessagesPhoto', {'photo': b['photo'], 'server': b['server'], 'hash': b['hash']})[0]
    authorize.method("messages.send",
                     {"peer_id": chat_id, "attachment": f'photo{c["owner_id"]}_{c["id"]}', 'random_id': 0})

    add_statistics(action='map')


# –ö–æ–º–∞–Ω–¥–∞ –ê–≤—Ç–æ—Ä—ã
@bot.on.message(text='–ê–≤—Ç–æ—Ä—ã')
async def authors(ans: Message):
    chat_id = ans.from_id
    await ans.answer('–ê–≤—Ç–æ—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞:\n'
                     '-[id132677094|–ê–ª–µ–∫—Å–µ–π]\n'
                     '-[id128784852|–°—É–ª—Ç–∞–Ω]\n'
                     '-[id169584462|–ê–ª–µ–∫—Å–∞–Ω–¥—Ä] \n'
                     '-[id135615548|–í–ª–∞–¥–∏—Å–ª–∞–≤]\n'
                     '-[id502898628|–ö–∏—Ä–∏–ª–ª]\n\n'
                     '–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–æ–º –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º –ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. '
                     '–ë—É–¥–µ–º —Ä–∞–¥—ã üòâ\n', keyboard=make_keyboard_start_menu()
                     )

    add_statistics(action='authors')


@bot.on.message(text=content_types['text'])
async def scheduler(ans: Message):
    chat_id = ans.from_id
    data = ans.text
    user = storage.get_user(chat_id=chat_id)

    if '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ üóì' == data and user.get('group'):
        await ans.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥\n', keyboard=make_keyboard_choose_schedule())
        add_statistics(action='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ')

    if ('–ù–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é' == data or '–ù–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é' == data) and user.get('group'):
        # –ï—Å–ª–∏ –∫—É—Ä—Å –Ω—É–ª—å, —Ç–æ–≥–¥–∞ —ç—Ç–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
        if storage.get_user(chat_id=chat_id)['course'] != 'None':
            group = storage.get_user(chat_id=chat_id)['group']
            schedule = storage.get_schedule(group=group)
        elif storage.get_user(chat_id=chat_id)['course'] == 'None':
            group = storage.get_user(chat_id=chat_id)['group']
            schedule = storage.get_schedule_prep(group=group)
        if schedule['schedule'] == []:
            await ans.answer('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ‚è±')
            add_statistics(action=data)
            return

        schedule = schedule['schedule']
        week = find_week()

        # –º–µ–Ω—è–µ–º –Ω–µ–¥–µ–ª—é
        if data == '–ù–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é':
            week = 'odd' if week == 'even' else 'even'

        week_name = '—á–µ—Ç–Ω–∞—è' if week == 'odd' else '–Ω–µ—á–µ—Ç–Ω–∞—è'

        if storage.get_user(chat_id=chat_id)['course'] != 'None':
            schedule_str = full_schedule_in_str(schedule, week=week)
        elif storage.get_user(chat_id=chat_id)['course'] == 'None':
            schedule_str = full_schedule_in_str_prep(schedule, week=week)

        await ans.answer(f'–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ {group}\n'
                         f'–ù–µ–¥–µ–ª—è: {week_name}', keyboard=make_keyboard_start_menu())

        for schedule in schedule_str:
            await ans.answer(f'{schedule}')

        add_statistics(action=data)



    elif '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è üçè' == data and user.get('group'):
        # –ï—Å–ª–∏ –∫—É—Ä—Å –Ω—É–ª—å, —Ç–æ–≥–¥–∞ —ç—Ç–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
        if storage.get_user(chat_id=chat_id)['course'] != 'None':
            group = storage.get_user(chat_id=chat_id)['group']
            schedule = storage.get_schedule(group=group)
        elif storage.get_user(chat_id=chat_id)['course'] == 'None':
            group = storage.get_user(chat_id=chat_id)['group']
            schedule = storage.get_schedule_prep(group=group)
        if not schedule:
            await ans.answer('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æüö´üò£\n'
                             '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ‚è±', keyboard=make_keyboard_start_menu())
            add_statistics(action='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è')
            return
        schedule = schedule['schedule']
        week = find_week()
        # –ï—Å–ª–∏ –∫—É—Ä—Å –Ω—É–ª—å, —Ç–æ–≥–¥–∞ —ç—Ç–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
        if storage.get_user(chat_id=chat_id)['course'] != 'None':
            schedule_one_day = get_one_day_schedule_in_str(schedule=schedule, week=week)
        elif storage.get_user(chat_id=chat_id)['course'] == 'None':
            schedule_one_day = get_one_day_schedule_in_str_prep(schedule=schedule, week=week)
        if not schedule_one_day:
            await ans.answer('–°–µ–≥–æ–¥–Ω—è –ø–∞—Ä –Ω–µ—Ç üòé')
            return
        await ans.answer(f'{schedule_one_day}')
        add_statistics(action='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è')

    elif '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ üçé' == data and user.get('group'):
        # –ï—Å–ª–∏ –∫—É—Ä—Å –Ω—É–ª—å, —Ç–æ–≥–¥–∞ —ç—Ç–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
        if storage.get_user(chat_id=chat_id)['course'] != 'None':
            group = storage.get_user(chat_id=chat_id)['group']
            schedule = storage.get_schedule(group=group)
        elif storage.get_user(chat_id=chat_id)['course'] == 'None':
            group = storage.get_user(chat_id=chat_id)['group']
            schedule = storage.get_schedule_prep(group=group)
        if not schedule:
            await ans.answer('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æüö´üò£\n'
                             '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ‚è±', keyboard=make_keyboard_start_menu())
            add_statistics(action='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞')
            return
        schedule = schedule['schedule']
        week = find_week()
        if datetime.today().isoweekday() == 7:
            if week == 'odd':
                week = 'even'
            elif week == 'even':
                week = 'odd'
            else:
                week = 'all'

        if storage.get_user(chat_id=chat_id)['course'] != 'None':
            schedule_next_day = get_next_day_schedule_in_str(schedule=schedule, week=week)
        elif storage.get_user(chat_id=chat_id)['course'] == 'None':
            schedule_next_day = get_next_day_schedule_in_str_prep(schedule=schedule, week=week)

        if not schedule_next_day:
            await ans.answer('–ó–∞–≤—Ç—Ä–∞ –ø–∞—Ä –Ω–µ—Ç üòé')
            return
        await ans.answer(f'{schedule_next_day}')
        add_statistics(action='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞')

    elif '–ë–ª–∏–∂–∞–π—à–∞—è –ø–∞—Ä–∞ ‚è±' in data and user.get('group'):
        await ans.answer('–ë–ª–∏–∂–∞–π—à–∞—è –ø–∞—Ä–∞', keyboard=make_keyboard_nearlesson())
        add_statistics(action='–ë–ª–∏–∂–∞–π—à–∞—è –ø–∞—Ä–∞')
        return


    elif '–¢–µ–∫—É—â–∞—è' in data and user.get('group'):
        if storage.get_user(chat_id=chat_id)['course'] != 'None':
            group = storage.get_user(chat_id=chat_id)['group']
            schedule = storage.get_schedule(group=group)
        elif storage.get_user(chat_id=chat_id)['course'] == 'None':
            group = storage.get_user(chat_id=chat_id)['group']
            schedule = storage.get_schedule_prep(group=group)
        if not schedule:
            await ans.answer('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æüö´üò£\n'
                             '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ‚è±', keyboard=make_keyboard_start_menu())
            add_statistics(action='–¢–µ–∫—É—â–∞—è')
            return
        schedule = schedule['schedule']
        week = find_week()

        now_lessons = get_now_lesson(schedule=schedule, week=week)

        # –µ—Å–ª–∏ –ø–∞—Ä –Ω–µ—Ç
        if not now_lessons:
            await ans.answer('–°–µ–π—á–∞—Å –ø–∞—Ä—ã –Ω–µ—Ç, –º–æ–∂–µ—Ç–µ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å)', keyboard=make_keyboard_start_menu())
            add_statistics(action='–¢–µ–∫—É—â–∞—è')
            return

        now_lessons_str = ''

        if storage.get_user(chat_id=chat_id)['course'] != 'None':
            for near_lesson in now_lessons:
                name = near_lesson['name']
                if name == '—Å–≤–æ–±–æ–¥–Ω–æ':
                    await ans.answer('–°–µ–π—á–∞—Å –ø–∞—Ä—ã –Ω–µ—Ç, –º–æ–∂–µ—Ç–µ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å)', keyboard=make_keyboard_start_menu())
                    return
                now_lessons_str += '-------------------------------------------\n'
                aud = near_lesson['aud']
                if aud:
                    aud = f'–ê—É–¥–∏—Ç–æ—Ä–∏—è: {aud}\n'
                time = near_lesson['time']
                info = near_lesson['info'].replace(",", "")
                prep = near_lesson['prep']

                now_lessons_str += f'{time}\n' \
                                   f'{aud}' \
                                   f'üëâ{name}\n' \
                                   f'{info} {prep}\n'
            now_lessons_str += '-------------------------------------------\n'

        elif storage.get_user(chat_id=chat_id)['course'] == 'None':
            for near_lesson in now_lessons:
                name = near_lesson['name']
                if name == '—Å–≤–æ–±–æ–¥–Ω–æ':
                    await ans.answer('–°–µ–π—á–∞—Å –ø–∞—Ä—ã –Ω–µ—Ç, –º–æ–∂–µ—Ç–µ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å)', keyboard=make_keyboard_start_menu())
                    return
                now_lessons_str += '-------------------------------------------\n'
                aud = near_lesson['aud']
                if aud:
                    aud = f'–ê—É–¥–∏—Ç–æ—Ä–∏—è: {aud}\n'
                time = near_lesson['time']
                info = near_lesson['info'].replace(",", "")
                groups = ', '.join(near_lesson['groups'])

                now_lessons_str += f'{time}\n' \
                                   f'{aud}' \
                                   f'üëâ{name}\n' \
                                   f'{info} {groups}\n'
            now_lessons_str += '-------------------------------------------\n'

        await ans.answer(f'üß†–¢–µ–∫—É—â–∞—è –ø–∞—Ä–∞üß†\n'f'{now_lessons_str}', keyboard=make_keyboard_start_menu())

        add_statistics(action='–¢–µ–∫—É—â–∞—è')

    elif '–°–ª–µ–¥—É—é—â–∞—è' in data and user.get('group'):
        if storage.get_user(chat_id=chat_id)['course'] != 'None':
            group = storage.get_user(chat_id=chat_id)['group']
            schedule = storage.get_schedule(group=group)
        elif storage.get_user(chat_id=chat_id)['course'] == 'None':
            group = storage.get_user(chat_id=chat_id)['group']
            schedule = storage.get_schedule_prep(group=group)
        if not schedule:
            await ans.answer('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æüö´üò£\n'
                             '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ‚è±', keyboard=make_keyboard_start_menu())
            add_statistics(action='–°–ª–µ–¥—É—é—â–∞—è')
            return
        schedule = schedule['schedule']
        week = find_week()

        near_lessons = get_near_lesson(schedule=schedule, week=week)

        # –µ—Å–ª–∏ –ø–∞—Ä –Ω–µ—Ç
        if not near_lessons:
            await ans.answer('–°–µ–≥–æ–¥–Ω—è –±–æ–ª—å—à–µ –ø–∞—Ä –Ω–µ—Ç üòé', keyboard=make_keyboard_start_menu())
            add_statistics(action='–°–ª–µ–¥—É—é—â–∞—è')
            return

        near_lessons_str = ''

        if storage.get_user(chat_id=chat_id)['course'] != 'None':
            for near_lesson in near_lessons:
                name = near_lesson['name']
                if name == '—Å–≤–æ–±–æ–¥–Ω–æ':
                    await ans.answer('–°–µ–≥–æ–¥–Ω—è –±–æ–ª—å—à–µ –ø–∞—Ä –Ω–µ—Ç üòé', keyboard=make_keyboard_start_menu())
                    return
                near_lessons_str += '-------------------------------------------\n'
                aud = near_lesson['aud']
                if aud:
                    aud = f'–ê—É–¥–∏—Ç–æ—Ä–∏—è: {aud}\n'
                time = near_lesson['time']

                info = near_lesson['info'].replace(",", "")
                prep = near_lesson['prep']

                near_lessons_str += f'{time}\n' \
                                    f'{aud}' \
                                    f'üëâ{name}\n' \
                                    f'{info} {prep}\n'

            near_lessons_str += '-------------------------------------------\n'
            await ans.answer(f'üß†–ë–ª–∏–∂–∞–π—à–∞—è –ø–∞—Ä–∞üß†\n'f'{near_lessons_str}', keyboard=make_keyboard_start_menu())

        elif storage.get_user(chat_id=chat_id)['course'] == 'None':
            for near_lesson in near_lessons:
                name = near_lesson['name']
                if name == '—Å–≤–æ–±–æ–¥–Ω–æ':
                    await ans.answer('–°–µ–≥–æ–¥–Ω—è –±–æ–ª—å—à–µ –ø–∞—Ä –Ω–µ—Ç üòé', keyboard=make_keyboard_start_menu())
                    return
                near_lessons_str += '-------------------------------------------\n'
                aud = near_lesson['aud']
                if aud:
                    aud = f'–ê—É–¥–∏—Ç–æ—Ä–∏—è: {aud}\n'
                time = near_lesson['time']
                info = near_lesson['info'].replace(",", "")
                groups = ', '.join(near_lesson['groups'])

                near_lessons_str += f'{time}\n' \
                                    f'{aud}' \
                                    f'üëâ{name}\n' \
                                    f'{info} {groups}\n'
            near_lessons_str += '-------------------------------------------\n'
            await ans.answer(f'üß†–ë–ª–∏–∂–∞–π—à–∞—è –ø–∞—Ä–∞üß†\n'f'{near_lessons_str}', keyboard=make_keyboard_start_menu())

        add_statistics(action='–°–ª–µ–¥—É—é—â–∞—è')


@bot.on.message()
async def wrapper(ans: Message):
    '''–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è'''
    chat_id = ans.from_id
    message_inst = ans.text
    message = ans.text
    user = storage.get_user(chat_id)
    print(user)

    # –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –º–µ—Å—Å–µ–¥–∂ –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–Ω–∏–≤–µ—Ä –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    institutes = name_institutes(storage.get_institutes())
    for institute in institutes:
        if len(message_inst) > 5:
            if message_inst[:-5] in institute:
                message_inst = institute

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if not user:
        institutes = name_institutes(storage.get_institutes())
        # –°–º–æ—Ç—Ä–∏–º –≤—ã–±—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–Ω—Å—Ç–∏—Ç—É—Ç
        if message_inst in institutes:
            # –ï—Å–ª–∏ –¥–∞, —Ç–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–¥
            storage.save_or_update_user(chat_id=chat_id, institute=message_inst)
            await ans.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏: {message_inst}\n')
            await ans.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å.',
                             keyboard=make_keyboard_choose_course_vk(storage.get_courses(message_inst)))


    # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥ –∫ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞–º
    if message == "–ù–∞–∑–∞–¥ –∫ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞–º" and not 'course' in user.keys():
        await ans.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç–∏—Ç—É—Ç.', keyboard=make_keyboard_institutes(storage.get_institutes()))
        storage.delete_user_or_userdata(chat_id=chat_id)
        return

    # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥ –∫ –∫—É—Ä—Å–∞–º
    if message == "–ù–∞–∑–∞–¥ –∫ –∫—É—Ä—Å–∞–º" and not 'group' in user.keys():

        await ans.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å.', keyboard=make_keyboard_choose_course_vk(
            storage.get_courses(storage.get_user(chat_id=chat_id)['institute'])))
        storage.delete_user_or_userdata(chat_id=chat_id, delete_only_course=True)
        return

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞
    elif not 'course' in user.keys():
        institute = user['institute']
        course = storage.get_courses(institute)
        # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –∫—É—Ä—Å–∞
        if message in name_courses(course):
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫—É—Ä—Å
            storage.save_or_update_user(chat_id=chat_id, course=message)
            groups = storage.get_groups(institute=institute, course=message)
            groups = name_groups(groups)
            await ans.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏: {message}\n')
            await ans.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É.', keyboard=make_keyboard_choose_group_vk(groups))
            return
        else:
            await ans.answer('–ù–µ –æ–≥–æ—Ä—á–∞–π –Ω–∞—Å, –º—ã –∂–µ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫ —Å—Ç–∞—Ä–∞–ª–∏—Å—å –Ω–∞–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π üòºüëáüèª')
        return

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞
    elif not 'group' in user.keys():
        institute = user['institute']
        course = user['course']
        groups = storage.get_groups(institute=institute, course=course)
        groups = name_groups(groups)
        # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –≥—Ä—É–ø–ø—ã
        if message in groups:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É
            storage.save_or_update_user(chat_id=chat_id, group=message)
            await ans.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!üòä\n\n'
                             '–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–≤—Ç–æ—Ä–Ω–æ, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"\n'
                             , keyboard=make_keyboard_start_menu())
        else:
            if message == "–î–∞–ª–µ–µ":
                await ans.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É.', keyboard=make_keyboard_choose_group_vk_page_2(groups))
            elif message == "–ù–∞–∑–∞–¥":
                await ans.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É.', keyboard=make_keyboard_choose_group_vk(groups))
            else:
                await ans.answer('–Ø –æ—á–µ–Ω—å —Å–æ–º–Ω–µ–≤–∞—é—Å—å, —á—Ç–æ —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø—ã –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –Ω–∏–∂–µ üòâ')
        return

    elif '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ üì£' in message and user.get('group'):
        time = user['notifications']
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        if not time:
            time = 0
        await ans.answer(f'{get_notifications_status(time)}', keyboard=make_inline_keyboard_notifications())

        add_statistics(action='–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ')

    elif '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' in message and user.get('group'):
        time = user['notifications']
        await ans.answer('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ‚öô\n\n'
                         '–£–∫–∞–∂–∏—Ç–µ –∑–∞ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ –ø–∞—Ä—ã –¥–æ–ª–∂–Ω–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',
                         keyboard=make_inline_keyboard_set_notifications(time))
        add_statistics(action='–ù–∞—Å—Ç—Ä–æ–π–∫–∏')

    elif '-' == message:
        time = user['notifications']
        if time == 0:
            await ans.answer('–•–æ—á–µ—à—å —É–π—Ç–∏ –≤ –º–∏–Ω—É—Å?', keyboard=make_inline_keyboard_set_notifications(time))
            return
        time -= 5
        # –û—Ç–Ω–∏–º–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        if time <= 0:
            time = 0
        storage.save_or_update_user(chat_id=chat_id, notifications=time)
        await ans.answer('–ú–∏–Ω—É—Å 5 –º–∏–Ω—É—Ç', keyboard=make_inline_keyboard_set_notifications(time))
        return

    elif '+' == message:
        time = user['notifications']
        time += 5
        storage.save_or_update_user(chat_id=chat_id, notifications=time)
        await ans.answer('–ü–ª—é—Å 5 –º–∏–Ω—É—Ç', keyboard=make_inline_keyboard_set_notifications(time))

    elif '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' in message:

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑—É
        time = user['notifications']

        group = storage.get_user(chat_id=chat_id)['group']

        if storage.get_user(chat_id=chat_id)['course'] == "None":
            schedule = storage.get_schedule_prep(group=group)['schedule']
        else:
            schedule = storage.get_schedule(group=group)['schedule']
        if time > 0:
            reminders = calculating_reminder_times(schedule=schedule, time=int(time))
        else:
            reminders = []
        storage.save_or_update_user(chat_id=chat_id, notifications=time, reminders=reminders)

        await ans.answer(f'{get_notifications_status(time)}', keyboard=make_keyboard_start_menu())


    elif '–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é' in message and user.get('group'):
        await ans.answer('–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é', keyboard=make_keyboard_start_menu())
        add_statistics(action='–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é')

    elif '<==–ù–∞–∑–∞–¥' == message and user.get('group'):
        await ans.answer('–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é', keyboard=make_keyboard_start_menu())

    elif '–î–∞–ª–µ–µ' in message:
        await ans.answer('–î–∞–ª–µ–µ', keyboard=make_keyboard_choose_group_vk_page_2())


    elif '–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥' == message and user.get('group'):
        await ans.answer('–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n'
                         '–ê–≤—Ç–æ—Ä—ã - —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–æ–≤ \n'
                         '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è- –ø–æ–≤—Ç–æ—Ä–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n'
                         '–ö–∞—Ä—Ç–∞ - –∫–∞—Ä—Ç–∞ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞', keyboard=make_keyboard_commands())

        add_statistics(action='help')
        return

    elif '–î—Ä—É–≥–æ–µ ‚ö°' == message and user.get('group'):
        await ans.answer('–î—Ä—É–≥–æ–µ', keyboard=make_keyboard_extra())

        add_statistics(action='help')
        return



    else:
        await ans.answer('–¢–∞–∫–æ–º—É –µ—â—ë –Ω–µ –Ω–∞—É—á–∏–ª–∏ üòá, –∑–Ω–∞—é —Ç–æ–ª—å–∫–æ —ç—Ç–∏ –∫–æ–º–∞–Ω–¥—ã:\n'
                         '–ê–≤—Ç–æ—Ä—ã - —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–æ–≤ \n'
                         '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è - –ø–æ–≤—Ç–æ—Ä–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n'
                         '–ö–∞—Ä—Ç–∞ - –∫–∞—Ä—Ç–∞ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞', keyboard=make_keyboard_start_menu())
        add_statistics(action='bullshit')


def main():
    '''–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞'''
    bot.run_forever()


if __name__ == "__main__":
    main()
