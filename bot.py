import telebot
import json
import time

import DB

import Parser

import reminder

import timer

from flask import Flask, request

from config import TOKEN, URL

from creating_buttons import makeReplyKeyboard_startMenu, makeInlineKeyboard_chooseInstitute, \
    makeInlineKeyboard_chooseCourses, makeInlineKeyboard_chooseGroups, makeInlineKeyboard_remining, \
    makeInlineKeyboard_custRemining

bot = telebot.TeleBot(TOKEN, threaded=False)


# ==================== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ ==================== #

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start_message(message):
    chat_id = message.chat.id

    # –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É - –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!
    if DB.get_user_info(chat_id):
        DB.del_user_info(chat_id)

    bot.send_message(chat_id=chat_id, text='–ü—Ä–∏–≤–µ—Ç!\n')
    bot.send_message(chat_id=chat_id, text='–î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –Ω–µ–±–æ–ª—å—à—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—éüòâ\n'
                                           '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç–∏—Ç—É—Ç',
                     reply_markup=makeInlineKeyboard_chooseInstitute(DB.get_institute()))


# –ö–æ–º–∞–Ω–¥–∞ /reg
@bot.message_handler(commands=['reg'])
def registration(message):
    chat_id = message.chat.id
    DB.del_user_info(chat_id=chat_id)
    bot.send_message(chat_id=chat_id, text='–ü—Ä–æ–π–¥–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—éüòâ\n'
                                           '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç–∏—Ç—É—Ç',
                     reply_markup=makeInlineKeyboard_chooseInstitute(DB.get_institute()))


# –ö–æ–º–∞–Ω–¥–∞ /help
@bot.message_handler(commands=['help'])
def help(message):
    chat_id = message.chat.id
    bot.send_message(chat_id=chat_id, text='–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n'
                                           '/reg - –ø–æ–≤—Ç–æ—Ä–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')


last_data = {}  # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –Ω–∞–∂–∞—Ç–æ–π –∫–Ω–æ–ø–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º


# ==================== –û–±—Ä–∞–±–æ—Ç–∫–∞ Inline –∫–Ω–æ–ø–æ–∫ ==================== #
@bot.callback_query_handler(func=lambda call: True)
def handle_query(message):
    global last_data
    chat_id = message.message.chat.id
    message_id = message.message.message_id
    data = message.data

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–∂–∞–ª –æ–¥–Ω—É –∏ —Ç—É –∂–µ –∫–Ω–æ–ø–∫—É –Ω–µ–∫–æ–ª—å–∫–æ —Ä–∞–∑ (—Å –æ–¥–Ω–æ–π –∏ —Ç–æ–π –∂–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π)
    if chat_id in last_data.keys() and data == last_data[chat_id]:
        return
    last_data[chat_id] = data
    print(data)

    # –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∏–Ω—Å—Ç–∏—Ç—É—Ç
    if 'inst_id' in data:
        data = json.loads(data)
        courses = DB.get_course(data['inst_id'])

        DB.set_user_inst(chat_id=chat_id, inst_id=data['inst_id'])  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–∞–∑—É –∏–Ω—Å—Ç–∏—Ç—É—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        # –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫—É—Ä—Å–æ–≤
        bot.edit_message_text(message_id=message_id, chat_id=chat_id, text='–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å',
                              reply_markup=makeInlineKeyboard_chooseCourses(courses))

    # –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∫—É—Ä—Å –∏–ª–∏ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫—É—Ä—Å–∞
    elif 'course_id' in data:
        data = json.loads(data)

        # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
        if data['course_id'] == 'back':
            DB.del_user_inst(chat_id)  # –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–Ω—Å—Ç–∏—Ç—É—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            bot.edit_message_text(message_id=message_id, chat_id=chat_id,
                                  text='–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç–∏—Ç—É—Ç',
                                  reply_markup=makeInlineKeyboard_chooseInstitute(DB.get_institute()))
            return

        groups = DB.get_group(data['course_id'])

        DB.set_user_course(chat_id=chat_id, course_id=data['course_id'])  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–∞–∑—É –∫—É—Ä—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        # –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –≥—Ä—É–ø–ø
        bot.edit_message_text(message_id=message_id, chat_id=chat_id, text='–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É',
                              reply_markup=makeInlineKeyboard_chooseGroups(groups))

    # –ü–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –≥—Ä—É–ø–ø—É –∏–ª–∏ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥—Ä—É–ø–ø—ã
    elif 'group_id' in data:
        data = json.loads(data)

        # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª–∏ –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
        if data['group_id'] == 'back':
            DB.del_user_course(chat_id)  # –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫—É—Ä—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            inst_name = DB.get_user_info(chat_id)['inst']
            courses = DB.get_course(inst_name=inst_name)
            # –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –∫—É—Ä—Å–æ–≤
            bot.edit_message_text(message_id=message_id, chat_id=chat_id, text='–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å',
                                  reply_markup=makeInlineKeyboard_chooseCourses(courses))
            return

        DB.set_user_group(chat_id=chat_id, group_id=data['group_id'])  # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–∞–∑—É –≥—Ä—É–ø–ø—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        # –£–¥–∞–ª—è–µ–º –º–µ–Ω—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        bot.delete_message(message_id=message_id, chat_id=chat_id)

        bot.send_message(chat_id=chat_id,
                         text='–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!üòä\n\n'
                              '–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–≤—Ç–æ—Ä–Ω–æ, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /reg',
                         reply_markup=makeReplyKeyboard_startMenu())

    elif 'remining_btn' in data:
        data = json.loads(data)
        if data['remining_btn'] == 'close':
            bot.delete_message(message_id=message_id, chat_id=chat_id)
            return
        time = data['remining_btn']
        bot.edit_message_text(message_id=message_id, chat_id=chat_id,
                              text='–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ‚öô\n\n'
                                   '–£–∫–∞–∂–∏—Ç–µ –∑–∞ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ –ø–∞—Ä—ã –¥–æ–ª–∂–Ω–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',
                              reply_markup=makeInlineKeyboard_custRemining(time))


    elif 'remining_del' in data:
        data = json.loads(data)
        time = data['remining_del']
        if time == 0:
            return
        time -= 5
        bot.edit_message_reply_markup(message_id=message_id, chat_id=chat_id,
                                      reply_markup=makeInlineKeyboard_custRemining(time))


    elif 'remining_add' in data:
        data = json.loads(data)
        time = data['remining_add']
        time += 5
        bot.edit_message_reply_markup(message_id=message_id, chat_id=chat_id,
                                      reply_markup=makeInlineKeyboard_custRemining(time))

    elif 'remining_save' in data:
        data = json.loads(data)
        time = data['remining_save']

        DB.set_user_reminding(chat_id=chat_id, time=time)

        bot.edit_message_text(message_id=message_id, chat_id=chat_id, text=reminder.remining_info(time),
                              reply_markup=makeInlineKeyboard_remining(time))


# ==================== –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ ==================== #
@bot.message_handler(content_types=['text'])
def text(message):
    chat_id = message.chat.id
    data = message.text

    user_info = DB.get_user_info(chat_id)

    if '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ' in data and user_info:
        schedule = Parser.get_full_schedule(user_info)
        bot.send_message(chat_id=chat_id, text=schedule
                         )
    elif '–ë–ª–∏–∂–∞–π—à–∞—è –ø–∞—Ä–∞' in data and user_info:
        lessons = [{'date': '18 –º–∞—Ä—Ç–∞', 'time': '22:15', 'name': '–§–∏–∑–∏–∫–∞', 'aud': '–ö-313'},
                   {'date': '18 –º–∞—Ä—Ç–∞', 'time': '22:30', 'name': '–ú–∞—Ç–∞–Ω', 'aud': '–ñ-310'}]
        near_lesson = timer.get_near_lesson(lessons)
        if not near_lesson:
            bot.send_message(chat_id=chat_id, text='–°–µ–≥–æ–¥–Ω—è –±–æ–ª—å—à–µ –ø–∞—Ä –Ω–µ—Ç üòé')
            return
        bot.send_message(chat_id=chat_id, text=f'–ë–ª–∏–∂–∞–π—à–∞—è –ø–∞—Ä–∞ {near_lesson["name"]}\n'
                                               f'–ê—É–¥–∏—Ç–æ—Ä–∏—è {near_lesson["aud"]}\n'
                                               f'–ù–∞—á–∞–ª–æ –≤ {near_lesson["time"]}')

    elif '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è' in data and user_info:
        time = user_info['remining']
        if not time:
            time = 0
        bot.send_message(chat_id=chat_id, text=reminder.remining_info(time),
                         reply_markup=makeInlineKeyboard_remining(time))
    else:
        bot.send_message(chat_id, text='–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é üòû')


if __name__ == '__main__':
    bot.skip_pending = True
    bot.remove_webhook()
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')
    bot.polling(none_stop=True, interval=0)

# ==================== WEBHOOK ==================== #
bot.remove_webhook()
time.sleep(1)
bot.set_webhook(url=URL + TOKEN)
app = Flask(__name__)


@app.route(f'/{TOKEN}', methods=["POST"])
def webhook():
    bot.process_new_updates([telebot.types.Update.de_json(request.stream.read().decode("utf-8"))])
    return 'ok', 200
