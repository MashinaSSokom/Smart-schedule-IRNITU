from actions import commands
from actions.main_menu import reminders
from functions.creating_schedule import full_schedule_in_str, full_schedule_in_str_prep, get_one_day_schedule_in_str, \
    get_next_day_schedule_in_str, get_one_day_schedule_in_str_prep, get_next_day_schedule_in_str_prep

from functions.near_lesson import get_near_lesson, get_now_lesson
from functions.storage import MongodbService
from vkbottle_types import BaseStateGroup
from functions.find_week import find_week
from tools.keyboards import *
import os
import pytz
from datetime import datetime
from vkbottle.bot import Bot, Message

from tools import schedule_processing, statistics
from actions.registration import teacher_registration, student_registration
from actions.search import prep_and_group_search, aud_search

TOKEN = os.environ.get('VK')

# –û–±—å—è–≤–ª–µ–Ω–∏–µ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –≥–ª–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö


storage = MongodbService().get_instance()
bot = Bot(TOKEN)  # TOKEN

content_types = {
    'text': ['–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ üóì', '–ë–ª–∏–∂–∞–π—à–∞—è –ø–∞—Ä–∞ ‚è±', '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è üçè', '–ù–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é',
             '–ù–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é',
             '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ üçé', '–°–ª–µ–¥—É—é—â–∞—è', '–¢–µ–∫—É—â–∞—è']}

content_commands = {'text': ['–ù–∞—á–∞—Ç—å', '–Ω–∞—á–∞—Ç—å', '–ù–∞—á–∞–ª–æ', 'start']}

content_reminders = {'text': ['–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ üì£', '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öô', '-', '+', '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å']}

content_map = {'text': ['map', '–ö–∞—Ä—Ç–∞', '–∫–∞—Ä—Ç–∞', 'Map', '–°—Ö–µ–º–∞', '—Å—Ö–µ–º–∞']}

TZ_IRKUTSK = pytz.timezone('Asia/Irkutsk')

map_image = "photo-198983266_457239216"


# ==================== –°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä –∏ –∫–Ω–æ–ø–æ–∫ ==================== #


# ==================== –ü–û–ò–°–ö ==================== #

class SuperStates(BaseStateGroup):
    SEARCH = 0
    PREP_REG = 1
    AUD_SEARCH = 2


@bot.on.message(state=SuperStates.PREP_REG)  # –°—Ç–µ–π—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
async def reg_prep_handler(ans: Message):
    """–°—Ç–µ–π—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π"""
    await teacher_registration.reg_prep(bot=bot, ans=ans, storage=storage)


@bot.on.message(text="–ì—Ä—É–ø–ø—ã –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏")  # –í—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ —Å—Ç–µ–π—Ç –ø–æ–∏—Å–∫–∞
async def start_search_handler(ans: Message):
    """–í—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ —Å—Ç–µ–π—Ç –ø–æ–∏—Å–∫–∞"""
    await prep_and_group_search.start_search(bot=bot, ans=ans, state=SuperStates, storage=storage)


@bot.on.message(state=SuperStates.SEARCH)  # –°—Ç–µ–π—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã –ø–æ–∏—Å–∫–∞
async def search_handler(ans: Message):
    await prep_and_group_search.search(bot=bot, ans=ans, storage=storage)


@bot.on.message(text="–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å")  # –í—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ —Å—Ç–µ–π—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π
async def start_prep_reg_handler(ans: Message):
    await teacher_registration.start_prep_reg(bot=bot, ans=ans, state=SuperStates, storage=storage)


@bot.on.message(text="–ê—É–¥–∏—Ç–æ—Ä–∏–∏")  # –í—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ —Å—Ç–µ–π—Ç –ø–æ–∏—Å–∫–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–∏
async def start_aud_search_handler(ans: Message):
    """–í—Ö–æ–∂–¥–µ–Ω–∏–µ –≤ —Å—Ç–µ–π—Ç –ø–æ–∏—Å–∫–∞ –∞—É–¥–∏—Ç–æ—Ä–∏–∏"""
    await aud_search.start_search(bot=bot, ans=ans, state=SuperStates)


@bot.on.message(state=SuperStates.AUD_SEARCH)  # –°—Ç–µ–π—Ç –ø–æ–∏—Å–∫–∞ –ø–æ –∞—É–¥–∏—Ç–æ—Ä–∏—è–º
async def aud_search_handler(ans: Message):
    await aud_search.search(bot=bot, ans=ans, storage=storage)


# ==================== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ ==================== #


# –ö–æ–º–∞–Ω–¥–∞ start
@bot.on.message(text=content_commands['text'])
async def start_message_handler(ans: Message):
    chat_id = ans.from_id
    await commands.start(ans=ans, chat_id=chat_id, storage=storage)
    statistics.add(action='start', storage=storage, tz=TZ_IRKUTSK)


# –ö–æ–º–∞–Ω–¥–∞ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
@bot.on.message(text='–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è')
async def registration_handler(ans: Message):
    chat_id = ans.from_id
    await commands.registration(ans=ans, chat_id=chat_id, storage=storage)
    statistics.add(action='reg', storage=storage, tz=TZ_IRKUTSK)


# –ö–æ–º–∞–Ω–¥–∞ –ö–∞—Ä—Ç–∞
@bot.on.message(text=content_map['text'])
async def show_map_handler(ans: Message):
    await commands.show_map(ans=ans, photo_vk_name=map_image)
    statistics.add(action='map', storage=storage, tz=TZ_IRKUTSK)


# –ö–æ–º–∞–Ω–¥–∞ –ê–≤—Ç–æ—Ä—ã
@bot.on.message(text='–ê–≤—Ç–æ—Ä—ã')
async def authors_handler(ans: Message):
    await commands.authors(ans=ans)
    statistics.add(action='authors', storage=storage, tz=TZ_IRKUTSK)


@bot.on.message(text=content_types['text'])
async def scheduler(ans: Message):
    chat_id = ans.from_id
    data = ans.text
    user = storage.get_vk_user(chat_id=chat_id)

    if '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ üóì' == data and user.get('group'):
        await ans.answer('–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥\n', keyboard=make_keyboard_choose_schedule())
        statistics.add(action='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', storage=storage, tz=TZ_IRKUTSK)

    if ('–ù–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é' == data or '–ù–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é' == data) and user.get('group'):
        # –ï—Å–ª–∏ –∫—É—Ä—Å –Ω—É–ª—å, —Ç–æ–≥–¥–∞ —ç—Ç–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
        if storage.get_vk_user(chat_id=chat_id)['course'] != 'None':
            group = storage.get_vk_user(chat_id=chat_id)['group']
            schedule = storage.get_schedule(group=group)
        elif storage.get_vk_user(chat_id=chat_id)['course'] == 'None':
            group = storage.get_vk_user(chat_id=chat_id)['group']
            schedule = storage.get_schedule_prep(group=group)
        if schedule['schedule'] == []:
            await ans.answer('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ‚è±')
            statistics.add(action=data, storage=storage, tz=TZ_IRKUTSK)
            return

        schedule = schedule['schedule']
        week = find_week()

        # –º–µ–Ω—è–µ–º –Ω–µ–¥–µ–ª—é
        if data == '–ù–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é':
            week = 'odd' if week == 'even' else 'even'

        week_name = '—á–µ—Ç–Ω–∞—è' if week == 'odd' else '–Ω–µ—á–µ—Ç–Ω–∞—è'

        if storage.get_vk_user(chat_id=chat_id)['course'] != 'None':
            schedule_str = full_schedule_in_str(schedule, week=week)
        elif storage.get_vk_user(chat_id=chat_id)['course'] == 'None':
            schedule_str = full_schedule_in_str_prep(schedule, week=week)

        await ans.answer(f'–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ {group}\n'
                         f'–ù–µ–¥–µ–ª—è: {week_name}', keyboard=make_keyboard_start_menu())

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        await schedule_processing.sending_schedule(ans=ans, schedule_str=schedule_str)

        statistics.add(action=data, storage=storage, tz=TZ_IRKUTSK)



    elif '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è üçè' == data and user.get('group'):
        # –ï—Å–ª–∏ –∫—É—Ä—Å –Ω—É–ª—å, —Ç–æ–≥–¥–∞ —ç—Ç–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
        if storage.get_vk_user(chat_id=chat_id)['course'] != 'None':
            group = storage.get_vk_user(chat_id=chat_id)['group']
            schedule = storage.get_schedule(group=group)
        elif storage.get_vk_user(chat_id=chat_id)['course'] == 'None':
            group = storage.get_vk_user(chat_id=chat_id)['group']
            schedule = storage.get_schedule_prep(group=group)
        if not schedule:
            await ans.answer('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æüö´üò£\n'
                             '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ‚è±', keyboard=make_keyboard_start_menu())
            statistics.add(action='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è', storage=storage, tz=TZ_IRKUTSK)
            return
        schedule = schedule['schedule']
        week = find_week()
        # –ï—Å–ª–∏ –∫—É—Ä—Å –Ω—É–ª—å, —Ç–æ–≥–¥–∞ —ç—Ç–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
        if storage.get_vk_user(chat_id=chat_id)['course'] != 'None':
            schedule_one_day = get_one_day_schedule_in_str(schedule=schedule, week=week)
        elif storage.get_vk_user(chat_id=chat_id)['course'] == 'None':
            schedule_one_day = get_one_day_schedule_in_str_prep(schedule=schedule, week=week)
        if not schedule_one_day:
            await ans.answer('–°–µ–≥–æ–¥–Ω—è –ø–∞—Ä –Ω–µ—Ç üòé')
            return
        await ans.answer(f'{schedule_one_day}')
        statistics.add(action='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è', storage=storage, tz=TZ_IRKUTSK)

    elif '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ üçé' == data and user.get('group'):
        # –ï—Å–ª–∏ –∫—É—Ä—Å –Ω—É–ª—å, —Ç–æ–≥–¥–∞ —ç—Ç–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å
        if storage.get_vk_user(chat_id=chat_id)['course'] != 'None':
            group = storage.get_vk_user(chat_id=chat_id)['group']
            schedule = storage.get_schedule(group=group)
        elif storage.get_vk_user(chat_id=chat_id)['course'] == 'None':
            group = storage.get_vk_user(chat_id=chat_id)['group']
            schedule = storage.get_schedule_prep(group=group)
        if not schedule:
            await ans.answer('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æüö´üò£\n'
                             '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ‚è±', keyboard=make_keyboard_start_menu())
            statistics.add(action='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞', storage=storage, tz=TZ_IRKUTSK)
            return
        schedule = schedule['schedule']
        week = find_week()
        if datetime.today().isoweekday() == 7:
            if week == 'odd':
                week = 'even'
            elif week == 'even':
                week = 'odd'
            else:
                week = 'all'

        if storage.get_vk_user(chat_id=chat_id)['course'] != 'None':
            schedule_next_day = get_next_day_schedule_in_str(schedule=schedule, week=week)
        elif storage.get_vk_user(chat_id=chat_id)['course'] == 'None':
            schedule_next_day = get_next_day_schedule_in_str_prep(schedule=schedule, week=week)

        if not schedule_next_day:
            await ans.answer('–ó–∞–≤—Ç—Ä–∞ –ø–∞—Ä –Ω–µ—Ç üòé')
            return
        await ans.answer(f'{schedule_next_day}')
        statistics.add(action='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞', storage=storage, tz=TZ_IRKUTSK)

    elif '–ë–ª–∏–∂–∞–π—à–∞—è –ø–∞—Ä–∞ ‚è±' in data and user.get('group'):
        await ans.answer('–ë–ª–∏–∂–∞–π—à–∞—è –ø–∞—Ä–∞', keyboard=make_keyboard_nearlesson())
        statistics.add(action='–ë–ª–∏–∂–∞–π—à–∞—è –ø–∞—Ä–∞', storage=storage, tz=TZ_IRKUTSK)
        return


    elif '–¢–µ–∫—É—â–∞—è' in data and user.get('group'):
        if storage.get_vk_user(chat_id=chat_id)['course'] != 'None':
            group = storage.get_vk_user(chat_id=chat_id)['group']
            schedule = storage.get_schedule(group=group)
        elif storage.get_vk_user(chat_id=chat_id)['course'] == 'None':
            group = storage.get_vk_user(chat_id=chat_id)['group']
            schedule = storage.get_schedule_prep(group=group)
        if not schedule:
            await ans.answer('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æüö´üò£\n'
                             '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ‚è±', keyboard=make_keyboard_start_menu())
            statistics.add(action='–¢–µ–∫—É—â–∞—è', storage=storage, tz=TZ_IRKUTSK)
            return
        schedule = schedule['schedule']
        week = find_week()

        now_lessons = get_now_lesson(schedule=schedule, week=week)

        # –µ—Å–ª–∏ –ø–∞—Ä –Ω–µ—Ç
        if not now_lessons:
            await ans.answer('–°–µ–π—á–∞—Å –ø–∞—Ä—ã –Ω–µ—Ç, –º–æ–∂–µ—Ç–µ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å)', keyboard=make_keyboard_start_menu())
            statistics.add(action='–¢–µ–∫—É—â–∞—è', storage=storage, tz=TZ_IRKUTSK)
            return

        now_lessons_str = ''

        if storage.get_vk_user(chat_id=chat_id)['course'] != 'None':
            for near_lesson in now_lessons:
                name = near_lesson['name']
                if name == '—Å–≤–æ–±–æ–¥–Ω–æ':
                    await ans.answer('–°–µ–π—á–∞—Å –ø–∞—Ä—ã –Ω–µ—Ç, –º–æ–∂–µ—Ç–µ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å)', keyboard=make_keyboard_start_menu())
                    return
                now_lessons_str += '-------------------------------------------\n'
                aud = near_lesson['aud']
                if aud:
                    aud = f'–ê—É–¥–∏—Ç–æ—Ä–∏—è: {aud}\n'
                time = near_lesson['time']
                info = near_lesson['info'].replace(",", "")
                prep = near_lesson['prep']

                now_lessons_str += f'{time}\n' \
                                   f'{aud}' \
                                   f'üëâ{name}\n' \
                                   f'{info} {prep}\n'
            now_lessons_str += '-------------------------------------------\n'

        elif storage.get_vk_user(chat_id=chat_id)['course'] == 'None':
            for near_lesson in now_lessons:
                name = near_lesson['name']
                if name == '—Å–≤–æ–±–æ–¥–Ω–æ':
                    await ans.answer('–°–µ–π—á–∞—Å –ø–∞—Ä—ã –Ω–µ—Ç, –º–æ–∂–µ—Ç–µ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å)', keyboard=make_keyboard_start_menu())
                    return
                now_lessons_str += '-------------------------------------------\n'
                aud = near_lesson['aud']
                if aud:
                    aud = f'–ê—É–¥–∏—Ç–æ—Ä–∏—è: {aud}\n'
                time = near_lesson['time']
                info = near_lesson['info'].replace(",", "")
                groups = ', '.join(near_lesson['groups'])

                now_lessons_str += f'{time}\n' \
                                   f'{aud}' \
                                   f'üëâ{name}\n' \
                                   f'{info} {groups}\n'
            now_lessons_str += '-------------------------------------------\n'

        await ans.answer(f'üß†–¢–µ–∫—É—â–∞—è –ø–∞—Ä–∞üß†\n'f'{now_lessons_str}', keyboard=make_keyboard_start_menu())

        statistics.add(action='–¢–µ–∫—É—â–∞—è', storage=storage, tz=TZ_IRKUTSK)

    elif '–°–ª–µ–¥—É—é—â–∞—è' in data and user.get('group'):
        if storage.get_vk_user(chat_id=chat_id)['course'] != 'None':
            group = storage.get_vk_user(chat_id=chat_id)['group']
            schedule = storage.get_schedule(group=group)
        elif storage.get_vk_user(chat_id=chat_id)['course'] == 'None':
            group = storage.get_vk_user(chat_id=chat_id)['group']
            schedule = storage.get_schedule_prep(group=group)
        if not schedule:
            await ans.answer('–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æüö´üò£\n'
                             '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ‚è±', keyboard=make_keyboard_start_menu())
            statistics.add(action='–°–ª–µ–¥—É—é—â–∞—è', storage=storage, tz=TZ_IRKUTSK)
            return
        schedule = schedule['schedule']
        week = find_week()

        near_lessons = get_near_lesson(schedule=schedule, week=week)

        # –µ—Å–ª–∏ –ø–∞—Ä –Ω–µ—Ç
        if not near_lessons:
            await ans.answer('–°–µ–≥–æ–¥–Ω—è –±–æ–ª—å—à–µ –ø–∞—Ä –Ω–µ—Ç üòé', keyboard=make_keyboard_start_menu())
            statistics.add(action='–°–ª–µ–¥—É—é—â–∞—è', storage=storage, tz=TZ_IRKUTSK)
            return

        near_lessons_str = ''

        if storage.get_vk_user(chat_id=chat_id)['course'] != 'None':
            for near_lesson in near_lessons:
                name = near_lesson['name']
                if name == '—Å–≤–æ–±–æ–¥–Ω–æ':
                    await ans.answer('–°–µ–≥–æ–¥–Ω—è –±–æ–ª—å—à–µ –ø–∞—Ä –Ω–µ—Ç üòé', keyboard=make_keyboard_start_menu())
                    return
                near_lessons_str += '-------------------------------------------\n'
                aud = near_lesson['aud']
                if aud:
                    aud = f'–ê—É–¥–∏—Ç–æ—Ä–∏—è: {aud}\n'
                time = near_lesson['time']

                info = near_lesson['info'].replace(",", "")
                prep = near_lesson['prep']

                near_lessons_str += f'{time}\n' \
                                    f'{aud}' \
                                    f'üëâ{name}\n' \
                                    f'{info} {prep}\n'

            near_lessons_str += '-------------------------------------------\n'
            await ans.answer(f'üß†–ë–ª–∏–∂–∞–π—à–∞—è –ø–∞—Ä–∞üß†\n'f'{near_lessons_str}', keyboard=make_keyboard_start_menu())

        elif storage.get_vk_user(chat_id=chat_id)['course'] == 'None':
            for near_lesson in near_lessons:
                name = near_lesson['name']
                if name == '—Å–≤–æ–±–æ–¥–Ω–æ':
                    await ans.answer('–°–µ–≥–æ–¥–Ω—è –±–æ–ª—å—à–µ –ø–∞—Ä –Ω–µ—Ç üòé', keyboard=make_keyboard_start_menu())
                    return
                near_lessons_str += '-------------------------------------------\n'
                aud = near_lesson['aud']
                if aud:
                    aud = f'–ê—É–¥–∏—Ç–æ—Ä–∏—è: {aud}\n'
                time = near_lesson['time']
                info = near_lesson['info'].replace(",", "")
                groups = ', '.join(near_lesson['groups'])

                near_lessons_str += f'{time}\n' \
                                    f'{aud}' \
                                    f'üëâ{name}\n' \
                                    f'{info} {groups}\n'
            near_lessons_str += '-------------------------------------------\n'
            await ans.answer(f'üß†–ë–ª–∏–∂–∞–π—à–∞—è –ø–∞—Ä–∞üß†\n'f'{near_lessons_str}', keyboard=make_keyboard_start_menu())

        statistics.add(action='–°–ª–µ–¥—É—é—â–∞—è', storage=storage, tz=TZ_IRKUTSK)


@bot.on.message(text=content_reminders['text'])
async def reminders_handler(ans: Message):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    await reminders.reminder_settings(ans=ans, storage=storage, tz=TZ_IRKUTSK)


@bot.on.message()
async def wrapper(ans: Message):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await student_registration.start_student_reg(ans=ans, storage=storage, tz=TZ_IRKUTSK)


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    bot.run_forever()


if __name__ == "__main__":
    main()
