from vkbottle.bot import Message

from actions import commands
from tools import keyboards, statistics

from functions.notifications import calculating_reminder_times, get_notifications_status


def name_institutes(institutes=[]):
    """ –•—Ä–∞–Ω–∏–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–Ω—Å—Ç–∏—Ç—É—Ç–æ–≤ """

    list_institutes = []
    for i in institutes:
        name = i['name']
        list_institutes.append(name)
    return list_institutes


def name_courses(courses=[]):
    """ –•—Ä–∞–Ω–∏–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤ """

    list_courses = []
    for i in courses:
        name = i['name']
        list_courses.append(name)
    return list_courses


def name_groups(groups=[]):
    """ –•—Ä–∞–Ω–∏–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≥—Ä—É–ø–ø """

    list_groups = []
    for i in groups:
        name = i['name']
        list_groups.append(name)
    return list_groups


async def start_student_reg(ans: Message, storage, tz):
    chat_id = ans.from_id
    message_inst = ans.text
    message = ans.text
    user = storage.get_vk_user(chat_id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –º–µ—Å—Å–µ–¥–∂ –ø–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–Ω–∏–≤–µ—Ä –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
    institutes = name_institutes(storage.get_institutes())
    for institute in institutes:
        if len(message_inst) > 5:
            if message_inst[:-5] in institute:
                message_inst = institute

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if not user:
        institutes = name_institutes(storage.get_institutes())
        # –°–º–æ—Ç—Ä–∏–º –≤—ã–±—Ä–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–Ω—Å—Ç–∏—Ç—É—Ç
        if message_inst in institutes:
            # –ï—Å–ª–∏ –¥–∞, —Ç–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–¥
            storage.save_or_update_vk_user(chat_id=chat_id, institute=message_inst)
            await ans.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏: {message_inst}\n')
            await ans.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å.',
                             keyboard=keyboards.make_keyboard_choose_course_vk(storage.get_courses(message_inst)))
        else:
            await commands.start(ans=ans, chat_id=chat_id, storage=storage)

    # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥ –∫ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞–º
    elif message == "–ù–∞–∑–∞–¥ –∫ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞–º" and not 'course' in user.keys():
        await ans.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç–∏—Ç—É—Ç.', keyboard=keyboards.make_keyboard_institutes(storage.get_institutes()))
        storage.delete_vk_user_or_userdata(chat_id=chat_id)
        return

    # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –ù–∞–∑–∞–¥ –∫ –∫—É—Ä—Å–∞–º
    elif message == "–ù–∞–∑–∞–¥ –∫ –∫—É—Ä—Å–∞–º" and not 'group' in user.keys():

        await ans.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∫—É—Ä—Å.', keyboard=keyboards.make_keyboard_choose_course_vk(
            storage.get_courses(storage.get_vk_user(chat_id=chat_id)['institute'])))
        storage.delete_vk_user_or_userdata(chat_id=chat_id, delete_only_course=True)
        return

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∏–Ω—Å—Ç–∏—Ç—É—Ç–∞
    elif not 'course' in user.keys():
        institute = user['institute']
        course = storage.get_courses(institute)
        # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –∫—É—Ä—Å–∞
        if message in name_courses(course):
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∫—É—Ä—Å
            storage.save_or_update_vk_user(chat_id=chat_id, course=message)
            groups = storage.get_groups(institute=institute, course=message)
            groups = name_groups(groups)
            await ans.answer(f'–í—ã –≤—ã–±—Ä–∞–ª–∏: {message}\n')
            await ans.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É.', keyboard=keyboards.make_keyboard_choose_group_vk(groups))
            return
        else:
            await ans.answer('–ù–µ –æ–≥–æ—Ä—á–∞–π –Ω–∞—Å, –º—ã –∂–µ –Ω–µ –ø—Ä–æ—Å—Ç–æ —Ç–∞–∫ —Å—Ç–∞—Ä–∞–ª–∏—Å—å –Ω–∞–¥ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π üòºüëáüèª')
        return

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –∫—É—Ä—Å–∞
    elif not 'group' in user.keys():
        institute = user['institute']
        course = user['course']
        groups = storage.get_groups(institute=institute, course=course)
        groups = name_groups(groups)
        # –ï—Å–ª–∏ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –≥—Ä—É–ø–ø—ã
        if message in groups:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É
            storage.save_or_update_vk_user(chat_id=chat_id, group=message)
            await ans.answer('–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å!üòä\n\n'
                             '–î–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø–æ–≤—Ç–æ—Ä–Ω–æ, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"\n'
                             , keyboard=keyboards.make_keyboard_start_menu())
        else:
            if message == "–î–∞–ª–µ–µ":
                await ans.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É.', keyboard=keyboards.make_keyboard_choose_group_vk_page_2(groups))
            elif message == "–ù–∞–∑–∞–¥":
                await ans.answer('–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É.', keyboard=keyboards.make_keyboard_choose_group_vk(groups))
            else:
                await ans.answer('–Ø –æ—á–µ–Ω—å —Å–æ–º–Ω–µ–≤–∞—é—Å—å, —á—Ç–æ —Ç–≤–æ–µ–π –≥—Ä—É–ø–ø—ã –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ –Ω–∏–∂–µ üòâ')
        return

    elif '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ üì£' in message and user.get('group'):
        time = user['notifications']
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        if not time:
            time = 0
        await ans.answer(f'{get_notifications_status(time)}', keyboard=keyboards.make_inline_keyboard_notifications())

        statistics.add(action='–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ', storage=storage, tz=tz)

    elif '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' in message and user.get('group'):
        time = user['notifications']
        await ans.answer('–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ‚öô\n\n'
                         '–£–∫–∞–∂–∏—Ç–µ –∑–∞ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ –ø–∞—Ä—ã –¥–æ–ª–∂–Ω–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',
                         keyboard=keyboards.make_inline_keyboard_set_notifications(time))
        statistics.add(action='–ù–∞—Å—Ç—Ä–æ–π–∫–∏', storage=storage, tz=tz)

    elif '-' == message:
        time = user['notifications']
        if time == 0:
            await ans.answer('–•–æ—á–µ—à—å —É–π—Ç–∏ –≤ –º–∏–Ω—É—Å?', keyboard=keyboards.make_inline_keyboard_set_notifications(time))
            return
        time -= 5
        # –û—Ç–Ω–∏–º–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        if time <= 0:
            time = 0
        storage.save_or_update_vk_user(chat_id=chat_id, notifications=time)
        await ans.answer('–ú–∏–Ω—É—Å 5 –º–∏–Ω—É—Ç', keyboard=keyboards.make_inline_keyboard_set_notifications(time))
        return

    elif '+' == message:
        time = user['notifications']
        time += 5
        storage.save_or_update_vk_user(chat_id=chat_id, notifications=time)
        await ans.answer('–ü–ª—é—Å 5 –º–∏–Ω—É—Ç', keyboard=keyboards.make_inline_keyboard_set_notifications(time))

    elif '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å' in message:

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑—É
        time = user['notifications']

        group = storage.get_vk_user(chat_id=chat_id)['group']

        if storage.get_vk_user(chat_id=chat_id)['course'] == "None":
            schedule = storage.get_schedule_prep(group=group)['schedule']
        else:
            schedule = storage.get_schedule(group=group)['schedule']
        if time > 0:
            reminders = calculating_reminder_times(schedule=schedule, time=int(time))
        else:
            reminders = []
        storage.save_or_update_vk_user(chat_id=chat_id, notifications=time, reminders=reminders)

        await ans.answer(f'{get_notifications_status(time)}', keyboard=keyboards.make_keyboard_start_menu())


    elif '–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é' in message and user.get('group'):
        await ans.answer('–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é', keyboard=keyboards.make_keyboard_start_menu())
        statistics.add(action='–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é', storage=storage, tz=tz)

    elif '<==–ù–∞–∑–∞–¥' == message and user.get('group'):
        await ans.answer('–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é', keyboard=keyboards.make_keyboard_start_menu())

    elif '–î–∞–ª–µ–µ' in message:
        await ans.answer('–î–∞–ª–µ–µ', keyboard=keyboards.make_keyboard_choose_group_vk_page_2())


    elif '–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥' == message and user.get('group'):
        await ans.answer('–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n'
                         '–ê–≤—Ç–æ—Ä—ã - —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–æ–≤ \n'
                         '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è- –ø–æ–≤—Ç–æ—Ä–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n'
                         '–ö–∞—Ä—Ç–∞ - –∫–∞—Ä—Ç–∞ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞', keyboard=keyboards.make_keyboard_commands())

        statistics.add(action='help', storage=storage, tz=tz)
        return

    elif '–î—Ä—É–≥–æ–µ ‚ö°' == message and user.get('group'):
        await ans.answer('–î—Ä—É–≥–æ–µ', keyboard=keyboards.make_keyboard_extra())
        statistics.add(action='–î—Ä—É–≥–æ–µ', storage=storage, tz=tz)
        return

    elif '–ü–æ–∏—Å–∫ üîé' == message and user.get('group'):

        await ans.answer('–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å', keyboard=keyboards.make_keyboard_search())



    else:
        await ans.answer('–¢–∞–∫–æ–º—É –µ—â—ë –Ω–µ –Ω–∞—É—á–∏–ª–∏ üòá, –∑–Ω–∞—é —Ç–æ–ª—å–∫–æ —ç—Ç–∏ –∫–æ–º–∞–Ω–¥—ã:\n'
                         '–ê–≤—Ç–æ—Ä—ã - —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–æ–≤ \n'
                         '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è - –ø–æ–≤—Ç–æ—Ä–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n'
                         '–ö–∞—Ä—Ç–∞ - –∫–∞—Ä—Ç–∞ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞')
        statistics.add(action='bullshit', storage=storage, tz=tz)
