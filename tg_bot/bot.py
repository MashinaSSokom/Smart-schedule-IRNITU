import telebot

import pytz

import os
from time import sleep

from actions.main_menu import schedule
from actions.registration import student_registration
from functions.notifications import get_notifications_status
from functions.storage import MongodbService
from functions.logger import logger
from tools.keyboards import *
from functions.calculating_reminder_times import calculating_reminder_times

from flask import Flask, request

from tools import statistics

TOKEN = os.environ.get('TOKEN')
HOST_URL = os.environ.get('HOST_URL')

TZ_IRKUTSK = pytz.timezone('Asia/Irkutsk')

bot = telebot.TeleBot(TOKEN, threaded=False)

storage = MongodbService().get_instance()

app = Flask(__name__)

content_schedule = ['–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ üóì', '–ë–ª–∏–∂–∞–π—à–∞—è –ø–∞—Ä–∞ ‚è±', '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è üçè', '–ù–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é',
                    '–ù–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é',
                    '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ üçé', '–°–ª–µ–¥—É—é—â–∞—è', '–¢–µ–∫—É—â–∞—è']

content_students_registration = ['institute', 'course', 'group']


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç telegram
@app.route(f'/telegram-bot/{TOKEN}', methods=["POST"])
def webhook():
    bot.process_new_updates([telebot.types.Update.de_json(request.stream.read().decode("utf-8"))])
    return 'ok', 200


# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–µ—Ä–∞ –±–æ—Ç–∞
@app.route('/telegram-bot/status')
def status():
    return '–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω', 200


# ==================== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ ==================== #

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(commands=['start'])
def start_message(message):
    chat_id = message.chat.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if storage.get_user(chat_id):
        storage.delete_user_or_userdata(chat_id)  # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

    bot.send_message(chat_id=chat_id, text='–ü—Ä–∏–≤–µ—Ç!\n')
    bot.send_message(chat_id=chat_id, text='–î–ª—è –Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏—Ç–µ –Ω–µ–±–æ–ª—å—à—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—éüòâ\n'
                                           '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç–∏—Ç—É—Ç',
                     reply_markup=make_inline_keyboard_choose_institute(storage.get_institutes()))

    statistics.add(action='start', storage=storage, tz=TZ_IRKUTSK)


# –ö–æ–º–∞–Ω–¥–∞ /reg
@bot.message_handler(commands=['reg'])
def registration(message):
    chat_id = message.chat.id
    storage.delete_user_or_userdata(chat_id=chat_id)
    bot.send_message(chat_id=chat_id, text='–ü—Ä–æ–π–¥–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—éüòâ\n'
                                           '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç–∏—Ç—É—Ç',
                     reply_markup=make_inline_keyboard_choose_institute(storage.get_institutes()))

    statistics.add(action='reg', storage=storage, tz=TZ_IRKUTSK)


# –ö–æ–º–∞–Ω–¥–∞ /help
@bot.message_handler(commands=['help'])
def help(message):
    chat_id = message.chat.id
    bot.send_message(chat_id=chat_id, text='–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n'
                                           '/about - –æ–ø–∏—Å–∞–Ω–∏–µ —á–∞—Ç –±–æ—Ç–∞\n'
                                           '/authors - –°–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–æ–≤ \n'
                                           '/reg - –ø–æ–≤—Ç–æ—Ä–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è \n'
                                           '/map - –∫–∞—Ä—Ç–∞ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ \n')

    statistics.add(action='help', storage=storage, tz=TZ_IRKUTSK)


# –ö–æ–º–∞–Ω–¥–∞ /map
@bot.message_handler(commands=['map'])
def map(message):
    chat_id = message.chat.id
    bot.send_photo(chat_id, (open('map.jpg', "rb")))
    # –§–ê–ô–õ–û–ú (–†–ê–ë–û–¢–ê–ï–¢)
    # map = open("map.jpg", "rb")
    # bot.send_document(chat_id, map)

    statistics.add(action='map', storage=storage, tz=TZ_IRKUTSK)


# –ö–æ–º–∞–Ω–¥–∞ /about
@bot.message_handler(commands=['about'])
def about(message):
    chat_id = message.chat.id
    bot.send_message(chat_id=chat_id, parse_mode='HTML',
                     text='<b>–û –±–æ—Ç–µ:\n</b>'
                          'Smart schedule IRNITU bot - —ç—Ç–æ —á–∞—Ç –±–æ—Ç –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π –≤ '
                          '–ò—Ä–∫—É—Ç—Å–∫–æ–º –Ω–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–º —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ\n\n'
                          '<b>–ë–ª–∞–≥–æ–¥–∞—Ä—è –±–æ—Ç—É –º–æ–∂–Ω–æ:\n</b>'
                          '- –£–∑–Ω–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ\n'
                          '- –ù–∞–∂–∞—Ç–∏–µ–º –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–∏ —É–≤–∏–¥–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–ª–∏–∂–∞–π—à–µ–π –ø–∞—Ä–µ\n'
                          '- –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –≥–∏–±–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è, '
                          '–∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –∑–∞ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ –Ω–∞—á–∞–ª–∞ –∑–∞–Ω—è—Ç–∏—è')

    statistics.add(action='about', storage=storage, tz=TZ_IRKUTSK)


# –ö–æ–º–∞–Ω–¥–∞ /authors
@bot.message_handler(commands=['authors'])
def authors(message):
    chat_id = message.chat.id
    bot.send_message(chat_id=chat_id, parse_mode='HTML',
                     text='<b>–ê–≤—Ç–æ—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞:\n</b>'
                          '- –ê–ª–µ–∫—Å–µ–π @bolanebyla\n'
                          '- –°—É–ª—Ç–∞–Ω @ace_sultan\n'
                          '- –ê–ª–µ–∫—Å–∞–Ω–¥—Ä @alexandrshen\n'
                          '- –í–ª–∞–¥–∏—Å–ª–∞–≤ @TixoNNNAN\n'
                          '- –ö–∏—Ä–∏–ª–ª @ADAMYORT\n\n'
                          '–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–æ–º –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º –ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. '
                          '–ë—É–¥–µ–º —Ä–∞–¥—ã üòâ\n'
                     )

    statistics.add(action='authors', storage=storage, tz=TZ_IRKUTSK)


# Handles all messages which text matches regexp.
@bot.message_handler(regexp='–¥–∞—Ä–æ—É', content_types=['text'])
def command_help(message):
    bot.send_message(message.chat.id, 'Did someone call for help?')


# words2 = ['save_notifications', 'del_notifications']
#
#
# @bot.callback_query_handler(func=lambda message: any(word in message.data for word in words2))
# def qwe(message):
#     print('asd')
#     chat_id = message.message.chat.id
#     bot.send_message(chat_id=chat_id,
#                      text='–†–∞–±–æ—Ç–∞–µ—Ç!')


@bot.callback_query_handler(func=lambda message: any(word in message.data for word in content_students_registration))
def student_registration_handler(message):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"""
    student_registration.start_student_reg(bot=bot, message=message, storage=storage)


# ==================== –û–±—Ä–∞–±–æ—Ç–∫–∞ Inline –∫–Ω–æ–ø–æ–∫ ==================== #
@bot.callback_query_handler(func=lambda call: True)
def handle_query(message):
    chat_id = message.message.chat.id
    message_id = message.message.message_id
    data = message.data

    logger.info(f'Inline button data: {data}')

    if 'notification_btn' in data:
        data = json.loads(data)
        if data['notification_btn'] == 'close':
            try:
                bot.delete_message(message_id=message_id, chat_id=chat_id)
                return
            except Exception as e:
                logger.exception(e)
                return
        time = data['notification_btn']

        try:
            bot.edit_message_text(message_id=message_id, chat_id=chat_id,
                                  text='–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ‚öô\n\n'
                                       '–£–∫–∞–∂–∏—Ç–µ –∑–∞ —Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ –ø–∞—Ä—ã –¥–æ–ª–∂–Ω–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ',
                                  reply_markup=make_inline_keyboard_set_notifications(time))
        except Exception as e:
            logger.exception(e)
            return

    elif 'del_notifications' in data:
        data = json.loads(data)
        time = data['del_notifications']
        if time == 0:
            return
        time -= 5

        if time < 0:
            time = 0

        try:
            bot.edit_message_reply_markup(message_id=message_id, chat_id=chat_id,
                                          reply_markup=make_inline_keyboard_set_notifications(time))
        except Exception as e:
            logger.exception(e)
            return

    elif 'add_notifications' in data:
        data = json.loads(data)
        time = data['add_notifications']
        time += 5

        try:
            bot.edit_message_reply_markup(message_id=message_id, chat_id=chat_id,
                                          reply_markup=make_inline_keyboard_set_notifications(time))
        except Exception as e:
            logger.exception(e)
            return

    elif 'save_notifications' in data:
        data = json.loads(data)
        time = data['save_notifications']

        group = storage.get_user(chat_id=chat_id)['group']

        schedule = storage.get_schedule(group=group)['schedule']
        if time > 0:
            reminders = calculating_reminder_times(schedule=schedule, time=int(time))
        else:
            reminders = []
        storage.save_or_update_user(chat_id=chat_id, notifications=time, reminders=reminders)

        try:
            bot.edit_message_text(message_id=message_id, chat_id=chat_id, text=get_notifications_status(time),
                                  reply_markup=make_inline_keyboard_notifications(time))
        except Exception as e:
            logger.exception(e)
            return

        statistics.add(action='save_notifications', storage=storage, tz=TZ_IRKUTSK)


# =============================================================


@bot.message_handler(func=lambda message: message.text in content_schedule, content_types=['text'])
def schedule_handler(message):
    """–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"""
    schedule.get_schedule(bot=bot, message=message, storage=storage, tz=TZ_IRKUTSK)


# ==================== –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ ==================== #
@bot.message_handler(content_types=['text'])
def text(message):
    chat_id = message.chat.id
    data = message.text
    user = storage.get_user(chat_id=chat_id)
    logger.info(f'Message data: {data}')

    if '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ üì£' in data and user:
        time = user['notifications']
        if not time:
            time = 0
        bot.send_message(chat_id=chat_id, text=get_notifications_status(time),
                         reply_markup=make_inline_keyboard_notifications(time))

        statistics.add(action='–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è', storage=storage, tz=TZ_IRKUTSK)

    elif '–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é' in data and user:
        bot.send_message(chat_id, text='–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=make_keyboard_start_menu())

        statistics.add(action='–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é', storage=storage, tz=TZ_IRKUTSK)

    elif '–ê–≤—Ç–æ—Ä—ã' == data and user:
        bot.send_message(chat_id, parse_mode='HTML', text='<b>–ê–≤—Ç–æ—Ä—ã –ø—Ä–æ–µ–∫—Ç–∞:\n</b>'
                                                          '- –ê–ª–µ–∫—Å–µ–π @bolanebyla\n'
                                                          '- –°—É–ª—Ç–∞–Ω @ace_sultan\n'
                                                          '- –ê–ª–µ–∫—Å–∞–Ω–¥—Ä @alexandrshen\n'
                                                          '- –í–ª–∞–¥–∏—Å–ª–∞–≤ @TixoNNNAN\n'
                                                          '- –ö–∏—Ä–∏–ª–ª @ADAMYORT\n\n'
                                                          '–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–æ–º –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º –ø–∏—à–∏—Ç–µ –Ω–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è. '
                                                          '–ë—É–¥–µ–º —Ä–∞–¥—ã üòâ\n')

        statistics.add(action='–ê–≤—Ç–æ—Ä—ã', storage=storage, tz=TZ_IRKUTSK)

    elif '–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥' in data and user:
        bot.send_message(chat_id, text='–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n'
                                       '–ê–≤—Ç–æ—Ä—ã - —Å–ø–∏—Å–æ–∫ –∞–≤—Ç–æ—Ä–æ–≤ \n'
                                       '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è- –ø–æ–≤—Ç–æ—Ä–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è\n'
                                       '–ö–∞—Ä—Ç–∞ - –∫–∞—Ä—Ç–∞ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞', reply_markup=make_keyboard_commands())

        statistics.add(action='–î—Ä—É–≥–æ–µ', storage=storage, tz=TZ_IRKUTSK)

    elif '–î—Ä—É–≥–æ–µ ‚ö°' in data and user:
        bot.send_message(chat_id, text='–î—Ä—É–≥–æ–µ', reply_markup=make_keyboard_extra())

        statistics.add(action='–î—Ä—É–≥–æ–µ', storage=storage, tz=TZ_IRKUTSK)

    elif '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è' in data and user:
        bot.send_message(chat_id=chat_id, text='–ü—Ä–æ–π–¥–∏—Ç–µ –ø–æ–≤—Ç–æ—Ä–Ω—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—éüòâ\n'
                                               '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Å—Ç–∏—Ç—É—Ç',
                         reply_markup=make_inline_keyboard_choose_institute(storage.get_institutes()))

    elif '–ö–∞—Ä—Ç–∞' in data and user:
        bot.send_message(chat_id=chat_id, text='–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –∫–∞—Ä—Ç–∞ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...')
        bot.send_photo(chat_id, (open('map.jpg', "rb")))
        statistics.add(action='–ö–∞—Ä—Ç–∞', storage=storage, tz=TZ_IRKUTSK)

    else:
        if user:
            bot.send_message(chat_id, text='–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é üòû', reply_markup=make_keyboard_start_menu())
        else:
            bot.send_message(chat_id, text='–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é üòû')

        statistics.add(action='bullshit', storage=storage, tz=TZ_IRKUTSK)


if __name__ == '__main__':
    bot.skip_pending = True
    bot.remove_webhook()
    logger.info('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ')
    bot.polling(none_stop=True, interval=0)
else:
    bot.remove_webhook()
    sleep(1)
    bot.set_webhook(url=f'{HOST_URL}/telegram-bot/{TOKEN}')
