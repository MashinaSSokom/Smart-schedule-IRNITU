import os

import pytz
import telebot
from actions import commands
from actions.main_menu import schedule, reminders, main_menu
from actions.registration import student_registration
from functions.logger import logger
from functions.storage import MongodbService
from tools.keyboards import *

from tools import statistics

TG_TOKEN = os.environ.get('TG_TOKEN')


TZ_IRKUTSK = pytz.timezone('Asia/Irkutsk')

bot = telebot.TeleBot(TG_TOKEN, threaded=False)

storage = MongodbService().get_instance()

content_schedule = ['–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ üóì', '–ë–ª–∏–∂–∞–π—à–∞—è –ø–∞—Ä–∞ ‚è±', '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è üçè', '–ù–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é',
                    '–ù–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é',
                    '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ üçé', '–°–ª–µ–¥—É—é—â–∞—è', '–¢–µ–∫—É—â–∞—è']

content_main_menu_buttons = ['–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é', '<==–ù–∞–∑–∞–¥', '–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥', '–î—Ä—É–≥–æ–µ ‚ö°']

content_students_registration = ['institute', 'course', 'group']
content_reminder_settings = ['notification_btn', 'del_notifications', 'add_notifications', 'save_notifications']


# ==================== –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ ==================== #

# –ö–æ–º–∞–Ω–¥–∞ /start
@bot.message_handler(func=lambda message: message.text in ['–ù–∞—á–∞—Ç—å', '/start'], content_types=['text'])
def start_handler(message):
    commands.start(bot=bot, message=message, storage=storage, tz=TZ_IRKUTSK)


# –ö–æ–º–∞–Ω–¥–∞ /reg
@bot.message_handler(func=lambda message: message.text in ['–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', '/reg'], content_types=['text'])
def registration_handler(message):
    commands.registration(bot=bot, message=message, storage=storage, tz=TZ_IRKUTSK)


# –ö–æ–º–∞–Ω–¥–∞ /help
@bot.message_handler(func=lambda message: message.text in ['–ü–æ–º–æ—â—å', '/help'], content_types=['text'])
def help_handler(message):
    commands.help_info(bot=bot, message=message, storage=storage, tz=TZ_IRKUTSK)


# –ö–æ–º–∞–Ω–¥–∞ /map –ö–∞—Ä—Ç–∞

@bot.message_handler(func=lambda message: message.text in ['–ö–∞—Ä—Ç–∞', '/map'], content_types=['text'])
def map_handler(message):
    commands.show_map(bot=bot, message=message, storage=storage, tz=TZ_IRKUTSK)


# –ö–æ–º–∞–Ω–¥–∞ /about
@bot.message_handler(func=lambda message: message.text in ['–û –ø—Ä–æ–µ–∫—Ç–µ', '/about'], content_types=['text'])
def about_handler(message):
    commands.about(bot=bot, message=message, storage=storage, tz=TZ_IRKUTSK)


# –ö–æ–º–∞–Ω–¥–∞ /authors
@bot.message_handler(func=lambda message: message.text in ['–ê–≤—Ç–æ—Ä—ã', '/authors'], content_types=['text'])
def authors_handler(message):
    commands.authors(bot=bot, message=message, storage=storage, tz=TZ_IRKUTSK)


# ==================== –û–±—Ä–∞–±–æ—Ç–∫–∞ Inline –∫–Ω–æ–ø–æ–∫ ==================== #
@bot.callback_query_handler(func=lambda message: any(word in message.data for word in content_students_registration))
def student_registration_handler(message):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤"""
    data = message.data
    student_registration.start_student_reg(bot=bot, message=message, storage=storage)
    logger.info(f'Inline button data: {data}')


@bot.callback_query_handler(func=lambda message: any(word in message.data for word in content_reminder_settings))
def reminder_settings_handler(message):
    data = message.data
    reminders.reminder_settings(bot=bot, message=message, storage=storage, tz=TZ_IRKUTSK)
    logger.info(f'Inline button data: {data}')


@bot.message_handler(func=lambda message: message.text in content_schedule, content_types=['text'])
def schedule_handler(message):
    """–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ"""
    schedule.get_schedule(bot=bot, message=message, storage=storage, tz=TZ_IRKUTSK)


@bot.message_handler(func=lambda message: message.text == '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ üì£', content_types=['text'])
def reminders_info_handler(message):
    """–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    reminders.reminder_info(bot=bot, message=message, storage=storage, tz=TZ_IRKUTSK)


@bot.message_handler(func=lambda message: message.text in content_main_menu_buttons, content_types=['text'])
def main_menu_buttons_handler(message):
    """–û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥ –º–µ–Ω—é"""
    main_menu.processing_main_buttons(bot=bot, message=message, storage=storage, tz=TZ_IRKUTSK)


# ==================== –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ ==================== #
@bot.message_handler(content_types=['text'])
def text(message):
    chat_id = message.chat.id
    data = message.text
    user = storage.get_user(chat_id=chat_id)
    logger.info(f'Message data: {data}')

    if user:
        bot.send_message(chat_id, text='–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é üòû', reply_markup=make_keyboard_start_menu())
    else:
        bot.send_message(chat_id, text='–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é üòû')

    statistics.add(action='bullshit', storage=storage, tz=TZ_IRKUTSK)


if __name__ == '__main__':
    bot.remove_webhook()
    logger.info('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...')
    bot.infinity_polling(none_stop=True)
