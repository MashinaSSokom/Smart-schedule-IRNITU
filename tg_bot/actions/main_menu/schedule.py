from functions.creating_schedule import full_schedule_in_str, get_one_day_schedule_in_str, get_next_day_schedule_in_str
from functions.find_week import find_week
from functions.near_lesson import get_now_lesson
from tools import keyboards, statistics

from functions.logger import logger
from tools.check_schedule import check_schedule


def get_schedule(bot, message, storage, tz):
    chat_id = message.chat.id
    data = message.text

    user = storage.get_user(chat_id=chat_id)

    if '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ üóì' == data and user:
        try:
            bot.send_message(chat_id=chat_id, text='–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥',
                             reply_markup=keyboards.make_keyboard_choose_schedule())
        except Exception as e:
            logger.exception(e)
            return

        statistics.add(action='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ', storage=storage, tz=tz)

    elif ('–ù–∞ —Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é' == data or '–ù–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é' == data) and user:
        try:
            group = storage.get_user(chat_id=chat_id)['group']
        except Exception as e:
            logger.exception(e)
            return
        schedule = storage.get_schedule(group=group)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        if not check_schedule(bot=bot, chat_id=chat_id, schedule=schedule):
            return

        schedule = schedule['schedule']

        week = find_week()

        # –º–µ–Ω—è–µ–º –Ω–µ–¥–µ–ª—é
        if data == '–ù–∞ —Å–ª–µ–¥—É—é—â—É—é –Ω–µ–¥–µ–ª—é':
            week = 'odd' if week == 'even' else 'even'

        week_name = '—á–µ—Ç–Ω–∞—è' if week == 'odd' else '–Ω–µ—á–µ—Ç–Ω–∞—è'

        schedule_str = full_schedule_in_str(schedule, week=week)
        bot.send_message(chat_id=chat_id,
                         text=f'<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ {group}</b>\n'
                              f'–ù–µ–¥–µ–ª—è: {week_name}', parse_mode='HTML',
                         reply_markup=keyboards.make_keyboard_start_menu())

        for schedule in schedule_str:
            bot.send_message(chat_id=chat_id,
                             text=f'{schedule}', parse_mode='HTML')

        statistics.add(action=data, storage=storage, tz=tz)

    elif '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è üçè' in data and user:
        try:
            group = storage.get_user(chat_id=chat_id)['group']
        except Exception as e:
            logger.exception(e)
            return
        schedule = storage.get_schedule(group=group)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        if not check_schedule(bot=bot, chat_id=chat_id, schedule=schedule):
            return

        schedule = schedule['schedule']

        week = find_week()
        schedule_one_day = get_one_day_schedule_in_str(schedule=schedule, week=week)

        if not schedule_one_day:
            bot.send_message(chat_id=chat_id, text='–°–µ–≥–æ–¥–Ω—è –ø–∞—Ä –Ω–µ—Ç üòé')
            return

        bot.send_message(chat_id=chat_id,
                         text=f'{schedule_one_day}', parse_mode='HTML')

        statistics.add(action='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è', storage=storage, tz=tz)

    elif '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞ üçé' in data and user:
        try:
            group = storage.get_user(chat_id=chat_id)['group']
        except Exception as e:
            logger.exception(e)
            return
        schedule = storage.get_schedule(group=group)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        if not check_schedule(bot=bot, chat_id=chat_id, schedule=schedule):
            return

        schedule = schedule['schedule']

        week = find_week()
        schedule_next_day = get_next_day_schedule_in_str(schedule=schedule, week=week)

        if not schedule_next_day:
            bot.send_message(chat_id=chat_id, text='–ó–∞–≤—Ç—Ä–∞ –ø–∞—Ä –Ω–µ—Ç üòé')
            return

        bot.send_message(chat_id=chat_id,
                         text=f'{schedule_next_day}', parse_mode='HTML')

        statistics.add(action='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞', storage=storage, tz=tz)

    elif '–ë–ª–∏–∂–∞–π—à–∞—è –ø–∞—Ä–∞ ‚è±' in data and user:
        bot.send_message(chat_id, text='–ë–ª–∏–∂–∞–π—à–∞—è –ø–∞—Ä–∞', reply_markup=keyboards.make_keyboard_nearlesson())

        statistics.add(action='–ë–ª–∏–∂–∞–π—à–∞—è –ø–∞—Ä–∞', storage=storage, tz=tz)

    elif '–¢–µ–∫—É—â–∞—è' in data and user:
        try:
            group = storage.get_user(chat_id=chat_id)['group']
        except Exception as e:
            logger.exception(e)
            return
        schedule = storage.get_schedule(group=group)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        if not check_schedule(bot=bot, chat_id=chat_id, schedule=schedule):
            return

        schedule = schedule['schedule']
        week = find_week()
        now_lessons = get_now_lesson(schedule=schedule, week=week)

        # –µ—Å–ª–∏ –ø–∞—Ä –Ω–µ—Ç
        if not now_lessons:
            bot.send_message(chat_id=chat_id, text='–°–µ–π—á–∞—Å –ø–∞—Ä—ã –Ω–µ—Ç, –º–æ–∂–µ—Ç–µ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å')
            statistics.add(action='–¢–µ–∫—É—â–∞—è', storage=storage, tz=tz)
            return

        now_lessons_str = ''
        for near_lesson in now_lessons:
            name = near_lesson['name']
            if name == '—Å–≤–æ–±–æ–¥–Ω–æ':
                bot.send_message(chat_id=chat_id, text='–°–µ–π—á–∞—Å –ø–∞—Ä—ã –Ω–µ—Ç, –º–æ–∂–µ—Ç–µ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å',
                                 reply_markup=keyboards.make_keyboard_start_menu())
                return
            now_lessons_str += '-------------------------------------------\n'
            aud = near_lesson['aud']
            if aud:
                aud = f'–ê—É–¥–∏—Ç–æ—Ä–∏—è: {aud}\n'
            time = near_lesson['time']
            info = near_lesson['info'].replace(",", "")
            prep = near_lesson['prep']

            now_lessons_str += f'<b>{time}</b>\n' \
                               f'{aud}' \
                               f'üëâ{name}\n' \
                               f'{info} {prep}\n'
        now_lessons_str += '-------------------------------------------\n'
        bot.send_message(chat_id=chat_id, text=f'üß†–¢–µ–∫—É—â–∞—è –ø–∞—Ä–∞üß†\n'
                                               f'{now_lessons_str}', parse_mode='HTML',
                         reply_markup=keyboards.make_keyboard_start_menu())

        statistics.add(action='–¢–µ–∫—É—â–∞—è', storage=storage, tz=tz)

    elif '–°–ª–µ–¥—É—é—â–∞—è' in data and user:
        try:
            group = storage.get_user(chat_id=chat_id)['group']
        except Exception as e:
            logger.exception(e)
            return
        schedule = storage.get_schedule(group=group)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —É –≥—Ä—É–ø–ø—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        if not check_schedule(bot=bot, chat_id=chat_id, schedule=schedule):
            return

        schedule = schedule['schedule']
        week = find_week()
        now_lessons = get_now_lesson(schedule=schedule, week=week)

        # –µ—Å–ª–∏ –ø–∞—Ä –Ω–µ—Ç
        if not now_lessons:
            bot.send_message(chat_id=chat_id, text='–°–µ–≥–æ–¥–Ω—è –±–æ–ª—å—à–µ –ø–∞—Ä –Ω–µ—Ç üòé',
                             reply_markup=keyboards.make_keyboard_start_menu())
            statistics.add(action='–°–ª–µ–¥—É—é—â–∞—è', storage=storage, tz=tz)
            return

        near_lessons_str = ''
        for near_lesson in now_lessons:
            name = near_lesson['name']
            if name == '—Å–≤–æ–±–æ–¥–Ω–æ':
                bot.send_message(chat_id=chat_id, text='–°–µ–≥–æ–¥–Ω—è –±–æ–ª—å—à–µ –ø–∞—Ä –Ω–µ—Ç üòé',
                                 reply_markup=keyboards.make_keyboard_start_menu())
                return
            near_lessons_str += '-------------------------------------------\n'
            aud = near_lesson['aud']
            if aud:
                aud = f'–ê—É–¥–∏—Ç–æ—Ä–∏—è: {aud}\n'
            time = near_lesson['time']
            info = near_lesson['info'].replace(",", "")
            prep = near_lesson['prep']

            near_lessons_str += f'<b>{time}</b>\n' \
                                f'{aud}' \
                                f'üëâ{name}\n' \
                                f'{info} {prep}\n'
        near_lessons_str += '-------------------------------------------\n'
        bot.send_message(chat_id=chat_id, text=f'üß†–ë–ª–∏–∂–∞–π—à–∞—è –ø–∞—Ä–∞üß†\n'
                                               f'{near_lessons_str}', parse_mode='HTML',
                         reply_markup=keyboards.make_keyboard_start_menu())

        statistics.add(action='–°–ª–µ–¥—É—é—â–∞—è', storage=storage, tz=tz)
